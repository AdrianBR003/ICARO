---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/CCommon/TopUtility.astro";
import NavBar from "@/components/CCommon/NavBar.astro";
import Header from "@/components/CCommon/Header.astro";
import "@/styles/index.css";
import CTitle from "@/components/CCommon/TitlePages.astro";
import SearchInput from "@/components/CProjects/SearchProject.astro";
import ProjectsList from "@/components/CProjects/ProjectList.astro";
import AddProject from "@/components/CProjects/AddProject.astro";

const API_BASE_URL = 'http://localhost:8080';
let isAdmin = false;

try {
  const response = await fetch(
    "http://localhost:8080/api/session/check-admin",
    {
      credentials: "include",
    },
  );

  if (response.ok) {
    isAdmin = await response.json();
  }
} catch (error) {
  console.error("Error checking admin status:", error);
}

async function fetchProjects() {
  try {
    const response = await fetch(`${API_BASE_URL}/api/project/all`);
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching projects:', error);
    return [];
  }
}

async function fetchRelatedWorks(projectId) {
  try {
    const response = await fetch(`${API_BASE_URL}/api/project-work/project/${projectId}/works`);
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Error fetching works for project ${projectId}:`, error);
    return [];
  }
}

const projectsData = await fetchProjects();

const projectsWithWorks = await Promise.all(
  projectsData.map(async (project) => {
    const relatedWorks = await fetchRelatedWorks(project.id);
    
    return {
      id: project.id,
      title: project.title,
      description: project.description,
      colaborators: project.participants || [],
      startDate: project.projectDate ? new Date(project.projectDate).getFullYear().toString() : "N/A",
      endDate: project.projectDate ? new Date(project.projectDate).getFullYear().toString() : "N/A",
      relatedWorks: relatedWorks.map(work => ({
        type: work.tags && work.tags.length > 0 ? work.tags[0] : "PublicaciÃ³n",
        title: work.title,
        year: work.projectDate ? new Date(work.projectDate).getFullYear().toString() : "N/A",
        link: work.externalIds && work.externalIds.length > 0 ? work.externalIds[0] : null
      }))
    };
  })
);
---

<BaseLayout>
    <section class="max-w-full bg-white shadow-md rounded-lg">
        <TopUtility />
        <Header />
    </section>
    <section class="mt-10 max-w-full bg-white shadow-md">
        <NavBar />
    </section>

    <CTitle Title="Projects" />
    <AddProject isAdmin={isAdmin} /> 

    <section class="max-w-4xl mx-auto px-4">
        <SearchInput placeholder="Buscar proyectos por nombre..." />
        <ProjectsList projects={projectsWithWorks} />
    </section>
</BaseLayout>