---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/CCommon/TopUtility.astro";
import NavBar from "@/components/CCommon/NavBar.astro";
import Header from "@/components/CCommon/Header.astro";
import "@/styles/index.css";
import CTitle from "@/components/CCommon/TitlePages.astro";
import SearchInput from "@/components/CProjects/SearchProject.astro";
import ProjectsList from "@/components/CProjects/ProjectList.astro";
import AddProject from "@/components/CProjects/AddProject.astro";

const API_BASE_URL = 'http://localhost:8080';

async function fetchProjects() {
  try {
    const response = await fetch(`${API_BASE_URL}/api/project/all`);
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching projects:', error);
    return [];
  }
}

async function fetchRelatedWorks(projectId) {
  try {
    const response = await fetch(`${API_BASE_URL}/api/project-work/project/${projectId}/works`);
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Error fetching works for project ${projectId}:`, error);
    return [];
  }
}

const projectsData = await fetchProjects();

const projectsWithWorks = await Promise.all(
  projectsData.map(async (project) => {
    const relatedWorks = await fetchRelatedWorks(project.id);
    
    return {
      id: project.id,
      title: project.title,
      description: project.description,
      colaborators: project.participants || [],
      firstprojectDate: project.firstprojectDate || " ... ", 
      secondprojectDate: project.secondprojectDate || " ... ", 
      relatedWorks: relatedWorks.map(work => ({
        type: work.tags && work.tags.length > 0 ? work.tags[0] : "Publicación",
        title: work.title,
        year: work.projectDate ? new Date(work.projectDate).getFullYear().toString() : "N/A",
        link: work.externalIds && work.externalIds.length > 0 ? work.externalIds[0] : null
      }))
    };
  })
);
---

<BaseLayout>
    <section class="max-w-full bg-white shadow-md rounded-lg">
        <TopUtility />
        <Header />
    </section>
    <section class="mt-10 max-w-full bg-white shadow-md">
        <NavBar />
    </section>

    <CTitle Title="Projects" />
    <!-- Eliminar prop isAdmin - se maneja dinámicamente -->
    <AddProject /> 

    <section class="max-w-4xl mx-auto px-4">
        <SearchInput placeholder="Buscar proyectos por nombre..." />
        <!-- Eliminar prop isAdmin - se maneja dinámicamente -->
        <ProjectsList projects={projectsWithWorks} />
    </section>

    <script is:inline>
      document.addEventListener("DOMContentLoaded", function () {
        console.log('🚀 [PROJECTS] Página iniciada');
        
        // ============= GESTIÓN DEL ESTADO ADMIN =============
        let currentAdminStatus = false;
        
        // Verificar estado inicial desde localStorage o API
        async function initializeAdminStatus() {
          try {
            // Intentar obtener desde localStorage primero
            const storedStatus = localStorage.getItem('adminStatus');
            if (storedStatus !== null) {
              currentAdminStatus = JSON.parse(storedStatus);
              updateAdminElements(currentAdminStatus);
              console.log('📦 [PROJECTS] Estado admin desde localStorage:', currentAdminStatus);
            }
            
            // Verificar con la API para asegurar sincronización
            const response = await fetch('http://localhost:8080/api/session/check-admin', {
              credentials: 'include'
            });
            
            if (response.ok) {
              const apiStatus = await response.json();
              if (apiStatus !== currentAdminStatus) {
                currentAdminStatus = apiStatus;
                localStorage.setItem('adminStatus', JSON.stringify(apiStatus));
                updateAdminElements(apiStatus);
                console.log('🔄 [PROJECTS] Estado admin actualizado desde API:', apiStatus);
              }
            }
          } catch (error) {
            console.error('❌ [PROJECTS] Error verificando estado admin:', error);
            updateAdminElements(false);
          }
        }
        
        // Escuchar cambios desde TopUtility
        window.addEventListener('adminStatusChanged', function(event) {
          const { isAdmin, source } = event.detail;
          console.log(`🔄 [PROJECTS] Estado admin cambiado desde ${source}:`, isAdmin);
          currentAdminStatus = isAdmin;
          updateAdminElements(isAdmin);
        });
        
        // Actualizar elementos admin en la UI
        function updateAdminElements(isAdmin) {
          console.log('🎨 [PROJECTS] Actualizando UI admin:', isAdmin);
          
          // Botón de agregar proyecto
          const addProjectButton = document.getElementById('addProjectButton');
          if (addProjectButton) {
            if (isAdmin) {
              addProjectButton.classList.remove('hidden');
              addProjectButton.classList.add('flex');
            } else {
              addProjectButton.classList.remove('flex');
              addProjectButton.classList.add('hidden');
            }
          }
          
          // Botones de editar (excluyendo el botón principal de agregar)
          document.querySelectorAll('.edit-btn:not(#addProjectButton)').forEach(btn => {
            if (isAdmin) {
              btn.classList.remove('hidden');
              btn.classList.add('flex');
            } else {
              btn.classList.remove('flex');
              btn.classList.add('hidden');
            }
          });
          
          // Botones de eliminar
          document.querySelectorAll('.delete-btn').forEach(btn => {
            if (isAdmin) {
              btn.classList.remove('hidden');
              btn.classList.add('block');
            } else {
              btn.classList.remove('block');
              btn.classList.add('hidden');
            }
          });
          
          console.log('✅ [PROJECTS] UI actualizada correctamente');
        }
        
        // Inicializar estado admin
        initializeAdminStatus();
      });
    </script>
</BaseLayout>