---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/CCommon/TopUtility.astro";
import NavBar from "@/components/CCommon/NavBar.astro";
import Header from "@/components/CCommon/Header.astro";
import CTitle from "@/components/CCommon/TitlePages.astro";
import ResearchFilters from "@/components/CResearch/ResearchFilters.astro";
import ResearchList from "@/components/CResearch/ResearchList.astro";
import ResearchAddPublication from "@/components/CResearch/ResearchAddPublication.astro";
import "@/styles/index.css";

const API_BASE_URL = "http://localhost:8080";
let works = [];

try {
  const res = await fetch(`${API_BASE_URL}/api/works/all`);
  if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);
  works = await res.json();

  works = works.map((work) => {
    const { type, ...cleanWork } = work;
    let tags = [];

    if (work.tags) {
      if (Array.isArray(work.tags)) {
        tags = work.tags
          .filter((t) => t !== null && t !== undefined)
          .map((t) => String(t).trim())
          .filter((t) => t.length > 0);
      } else if (typeof work.tags === "string") {
        tags = work.tags
          .split(",")
          .map((t) => t.trim())
          .filter((t) => t.length > 0);
      } else {
        tags = [String(work.tags).trim()].filter((t) => t.length > 0);
      }
    }

    return {
      ...cleanWork,
      tags: tags,
    };
  });
} catch (e) {
  console.error("Error al obtener trabajos:", e);
  works = [];
}

const projectIds = [
  ...new Set(works.map((work) => work.projectId).filter(Boolean)),
];

const projectNamesMap = new Map();
for (const projectId of projectIds) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/project-work/name/${projectId}`,
    );

    if (response.ok) {
      const projectName = await response.text();
      projectNamesMap.set(projectId, projectName);
    } else {
      projectNamesMap.set(projectId, "");
    }
  } catch (error) {
    projectNamesMap.set(projectId, "");
  }
}

const worksWithProjectNames = works.map((work) => {
  const projectName = work.projectId
    ? projectNamesMap.get(work.projectId) || ""
    : "";
  return {
    ...work,
    projectName: projectName,
  };
});

const groupsObj = {};
worksWithProjectNames.forEach((w) => {
  const year = w.projectDate?.slice(0, 4) || "Sin fecha";
  if (!groupsObj[year]) groupsObj[year] = [];
  groupsObj[year].push(w);
});

const noDate = groupsObj["Sin fecha"] || [];
delete groupsObj["Sin fecha"];
const researchGroups = Object.entries(groupsObj)
  .map(([year, items]) => ({ year, items }))
  .sort((a, b) => b.year.localeCompare(a.year, { numeric: true }));
if (noDate.length) researchGroups.push({ year: "Sin fecha", items: noDate });

const mostRecentYear = researchGroups[0]?.year || "all";

const tagCategories = new Set();
const projectCategories = new Set();

worksWithProjectNames.forEach((work) => {
  work.tags.forEach((tag) => tagCategories.add(tag));
  if (work.projectName && work.projectName.trim() !== "") {
    projectCategories.add(work.projectName);
  }
});

// Ya no verificamos isAdmin del lado del servidor
// Se har√° del lado del cliente
---

<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <CTitle Title="Research" />

  <section class="max-w-4xl mx-auto px-4">
   
    <ResearchAddPublication isAdmin={false} />

    <ResearchFilters
      tagCategories={tagCategories}
      projectCategories={projectCategories}
      researchGroups={researchGroups}
      mostRecentYear={mostRecentYear}
    />

    <ResearchList researchGroups={researchGroups} isAdmin={false} />

    <div class="text-center mt-8">
      <button
        id="load-more"
        class="bg-[#1D293D] text-white px-4 py-2 rounded-md hover:shadow-[0_2px_10px_-2px_rgba(0,0,0,0.7)] transition-shadow"
        >Mostrar m√°s</button
      >
    </div>
  </section>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
      
      // ============= VERIFICACI√ìN DE ADMIN DEL LADO CLIENTE =============
      async function checkAndUpdateAdminElements() {
        try {
          const response = await fetch('http://localhost:8080/api/session/check-admin', {
            credentials: 'include'
          });
          
          if (response.ok) {
            const isAdmin = await response.json();
            console.log('üîç Admin status from client:', isAdmin);
            
            updateAdminElements(isAdmin);
          }
        } catch (error) {
          console.error('Error checking admin status:', error);
        }
      }
      
      function updateAdminElements(isAdmin) {
        document.querySelectorAll('.edit-btn').forEach(btn => {
          btn.style.display = isAdmin ? 'block' : 'none';
        });
        
        document.querySelectorAll('.delete-btn').forEach(btn => {
          btn.style.display = isAdmin ? 'block' : 'none';
        });
        
        const addPublicationContainer = document.querySelector('[data-admin-element]');
        if (addPublicationContainer) {
          addPublicationContainer.style.display = isAdmin ? 'block' : 'none';
        }
      }
      
      checkAndUpdateAdminElements();
      
      window.addEventListener('adminStatusChanged', function(event) {
        console.log('üëë Admin status changed, updating elements...');
        updateAdminElements(event.detail.isAdmin);
      });
      
      let visibleItems = 10;
      const articles = Array.from(
        document.querySelectorAll(".publication-entry"),
      );
      const categoryButtons = document.querySelectorAll(".category-btn");
      let activeFilters = new Set();

      categoryButtons.forEach((btn) => {
        btn.addEventListener("click", function () {
          const category = this.dataset.category;
          const type = this.dataset.type;
          const isActive = this.classList.contains("active-filter");

          if (isActive) {
            if (type === "project") {
              this.classList.remove(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-blue-600",
                "text-white",
                "border-blue-600",
              );
              this.classList.add(
                "bg-blue-50",
                "text-blue-800",
                "border-blue-200",
                "hover:bg-blue-100",
              );
            } else {
              this.classList.remove(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-[#1D293D]",
                "text-white",
                "border-[#1D293D]",
              );
              this.classList.add(
                "bg-white",
                "text-gray-800",
                "border-gray-200",
                "hover:bg-[#1D293D]",
                "hover:text-white",
              );
            }
            this.querySelector(".close-icon").classList.add("hidden");
            activeFilters.delete(category);
          } else {
            if (type === "project") {
              this.classList.add(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-blue-600",
                "text-white",
                "border-blue-600",
              );
              this.classList.remove(
                "bg-blue-50",
                "text-blue-800",
                "border-blue-200",
                "hover:bg-blue-100",
              );
            } else {
              this.classList.add(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-[#1D293D]",
                "text-white",
                "border-[#1D293D]",
              );
              this.classList.remove(
                "bg-white",
                "text-gray-800",
                "border-gray-200",
                "hover:bg-[#1D293D]",
                "hover:text-white",
              );
            }
            this.querySelector(".close-icon").classList.remove("hidden");
            activeFilters.add(category);
          }

          updateArticlesDisplay();
        });
      });

      function updateArticlesDisplay() {
        const yearFilter = document.getElementById("year-filter");
        const selectedYear = yearFilter ? yearFilter.value : "all";
        let visibleCount = 0;

        articles.forEach((article) => {
          const tagsStr = article.getAttribute("data-tags") || "";
          const tags = tagsStr.split(",").map((t) => t.trim());
          const projectName = article.getAttribute("data-project-name") || "";
          const articleYear = article.getAttribute("data-year");

          const allArticleCategories = [...tags];
          if (projectName && projectName.trim() !== "") {
            allArticleCategories.push(projectName);
          }

          let categoryFilterPassed = false;

          if (activeFilters.size === 0) {
            categoryFilterPassed = true;
          } else {
            categoryFilterPassed = Array.from(activeFilters).every((filter) =>
              allArticleCategories.includes(filter),
            );
          }

          const yearFilterPassed =
            selectedYear === "all" || articleYear === selectedYear;

          const shouldShow =
            categoryFilterPassed &&
            yearFilterPassed &&
            visibleCount < visibleItems;

          article.style.display = shouldShow ? "block" : "none";
          if (shouldShow) visibleCount++;
        });

        const loadMoreBtn = document.getElementById("load-more");
        if (loadMoreBtn) {
          loadMoreBtn.style.display =
            visibleCount >= visibleItems ? "inline-block" : "none";
        }
      }

      const yearFilter = document.getElementById("year-filter");
      if (yearFilter)
        yearFilter.addEventListener("change", updateArticlesDisplay);

      const searchInput = document.getElementById("search-input");
      if (searchInput) {
        searchInput.addEventListener("input", () => {
          const searchTerm = searchInput.value.toLowerCase();

          articles.forEach((article) => {
            const title =
              article.querySelector("h3")?.textContent.toLowerCase() || "";
            const authors =
              article
                .querySelector("p.text-sm.text-gray-700")
                ?.textContent.toLowerCase() || "";
            const shouldShow =
              title.includes(searchTerm) || authors.includes(searchTerm);
            article.style.display = shouldShow ? "block" : "none";
          });
        });
      }

      const loadMoreBtn = document.getElementById("load-more");
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", () => {
          visibleItems += 10;
          updateArticlesDisplay();
        });
      }

      updateArticlesDisplay();
    });
  </script>
</BaseLayout>