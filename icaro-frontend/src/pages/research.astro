---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/TopUtility.astro";
import NavBar from "@/components/NavBar.astro";
import Header from "@/components/Header.astro";
import EditModal from "@/components/EditResearchModal.astro";
import "@/styles/index.css";

const API_BASE_URL = "http://localhost:8080";
let works = [];

try {
  const res = await fetch(`${API_BASE_URL}/api/works/all`);
  if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);
  works = await res.json();

  works = works.map((work) => {
    const { type, ...cleanWork } = work;
    let tags = [];

    if (work.tags) {
      if (Array.isArray(work.tags)) {
        tags = work.tags
          .filter((t) => t !== null && t !== undefined)
          .map((t) => String(t).trim())
          .filter((t) => t.length > 0);
      } else if (typeof work.tags === "string") {
        tags = work.tags
          .split(",")
          .map((t) => t.trim())
          .filter((t) => t.length > 0);
      } else {
        tags = [String(work.tags).trim()].filter((t) => t.length > 0);
      }
    }

    return {
      ...cleanWork,
      tags: tags,
    };
  });
} catch (e) {
  console.error("Error al obtener trabajos:", e);
  works = [];
}

const projectIds = [
  ...new Set(works.map((work) => work.projectId).filter(Boolean)),
];

const projectNamesMap = new Map();
for (const projectId of projectIds) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/project-work/name/${projectId}`,
    );

    if (response.ok) {
      const projectName = await response.text();
      projectNamesMap.set(projectId, projectName);
    } else {
      projectNamesMap.set(projectId, "");
    }
  } catch (error) {
    projectNamesMap.set(projectId, "");
  }
}

const worksWithProjectNames = works.map((work) => {
  const projectName = work.projectId
    ? projectNamesMap.get(work.projectId) || ""
    : "";
  return {
    ...work,
    projectName: projectName,
  };
});

const groupsObj = {};
worksWithProjectNames.forEach((w) => {
  const year = w.projectDate?.slice(0, 4) || "Sin fecha";
  if (!groupsObj[year]) groupsObj[year] = [];
  groupsObj[year].push(w);
});

const noDate = groupsObj["Sin fecha"] || [];
delete groupsObj["Sin fecha"];
const researchGroups = Object.entries(groupsObj)
  .map(([year, items]) => ({ year, items }))
  .sort((a, b) => b.year.localeCompare(a.year, { numeric: true }));
if (noDate.length) researchGroups.push({ year: "Sin fecha", items: noDate });

const mostRecentYear = researchGroups[0]?.year || "all";

const tagCategories = new Set();
const projectCategories = new Set();

worksWithProjectNames.forEach((work) => {
  work.tags.forEach((tag) => tagCategories.add(tag));
  if (work.projectName && work.projectName.trim() !== "") {
    projectCategories.add(work.projectName);
  }
});

let currentWorkData = null;
---

<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <div class="text-center my-10">
    <div class="relative inline-block w-full text-center py-2">
      <h2 class="text-2xl font-bold text-[#231F20]">Research</h2>
      <span
        class="absolute left-1/2 bottom-0 w-20 h-1 bg-[#006D38] -translate-x-1/2"
      ></span>
    </div>
  </div>

  <section class="max-w-4xl mx-auto px-4">
    <div class="mb-10">
      <div class="relative max-w-full">
        <span
          class="absolute inset-y-0 left-0 flex items-center pl-4 text-gray-500"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            class="w-5 h-5"
          >
            <path
              fill-rule="evenodd"
              d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z"
              clip-rule="evenodd"></path>
          </svg>
        </span>
        <input
          id="search-input"
          type="search"
          placeholder="Buscar publicaciones por título o autor..."
          class="w-full pl-11 pr-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition"
        />
      </div>
    </div>

    <div class="mb-10">
      <div class="mb-4">
        <div class="flex items-center mb-2">
          <span class="text-sm text-gray-600 mr-2">Filtros activos (se aplican todos):</span>
        </div>
        <div class="flex flex-wrap gap-3 items-center">
          {
            Array.from(tagCategories).map((category) => (
              <button
                type="button"
                class="category-btn bg-white text-gray-800 px-4 py-2 rounded-md font-medium border border-gray-200 shadow-sm hover:bg-[#1D293D] hover:text-white transition-all duration-300 flex items-center"
                data-category={category}
                data-type="tag"
              >
                <span class="filter-content flex items-center gap-2">
                  <svg
                    class="close-icon hidden w-3 h-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                  <span>{category}</span>
                </span>
              </button>
            ))
          }
        </div>
      </div>

      <div class="border-t border-gray-200 pt-4">
        <div class="flex flex-wrap gap-3 items-center">
          {
            Array.from(projectCategories).map((category) => (
              <button
                type="button"
                class="category-btn project-btn bg-blue-50 text-blue-800 px-4 py-2 rounded-md font-medium border border-blue-200 shadow-sm hover:bg-blue-100 transition-all duration-300 flex items-center"
                data-category={category}
                data-type="project"
              >
                <span class="filter-content flex items-center gap-2">
                  <svg
                    class="close-icon hidden w-3 h-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                  <span>{category}</span>
                </span>
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <div class="mb-6 flex items-center gap-3 justify-end">
      <span class="text-sm text-gray-600">Año:</span>
      <div class="relative">
        <select
          id="year-filter"
          class="appearance-none bg-white border border-gray-300 rounded-md px-3 py-1 pr-7 text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500 transition cursor-pointer"
        >
          <option value="all">Todos</option>
          {
            researchGroups.map(({ year }) => (
              <option value={year} selected={year === mostRecentYear}>
                {year}
              </option>
            ))
          }
        </select>
        <div
          class="pointer-events-none absolute inset-y-0 right-1 flex items-center px-1 text-gray-500"
        >
          <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
      </div>
    </div>

     <div class="space-y-8" id="publications">
      {
        researchGroups.map(({ year, items }) =>
          items.map((work) => (
            <article
              class="publication-entry border rounded-lg p-6 shadow-sm bg-white transition-all duration-300 hover:shadow-md relative"
              data-tags={work.tags.join(",")}
              data-project-name={work.projectName || ""}
              data-year={year}
              data-work={JSON.stringify(work)}
            >
              <button 
                class="edit-btn hidden absolute top-4 right-4 p-2 bg-white rounded-full hover:bg-gray-300 transition-colors shadow-sm"
                data-id={work.id}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 text-gray-600"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"
                  ></path>
                </svg>
              </button>
              <div class="flex flex-wrap gap-2 mb-3">
                {work.tags.map((tag) => (
                  <span class="bg-gray-50 text-gray-800 text-xs px-2 py-1 rounded font-medium border border-gray-200 shadow-sm">
                    {tag}
                  </span>
                ))}
                {work.projectName && work.projectName.trim() !== "" && (
                  <span class="bg-[#effdf5] text-[#1D293D] text-xs px-2 py-1 rounded font-medium border border-[#BFE5D1] shadow-sm">
                    {work.projectName}
                  </span>
                )}
              </div>
              <h3 class="text-xl font-bold text-gray-900 leading-snug mb-2">
                {work.title}
              </h3>
              {work.participants?.length > 0 && (
                <p class="text-sm text-gray-700 mb-1">
                  {work.participants.join(", ")}
                </p>
              )}
              {work.externalIds?.length > 0 && (
                <p class="text-sm italic text-gray-600">
                  DOI: {work.externalIds[0]}
                </p>
              )}
              <p class="text-sm italic text-gray-600">Publicado en: {year}</p>
              <button
                class="mt-4 bg-gray-100 text-gray-800 text-xs px-3 py-1 rounded hover:bg-gray-200 transition"
                type="button"
              >
                BibTeX
              </button>
            </article>
          )),
        )
      }
    </div>

    <div class="text-center mt-8">
      <button
        id="load-more"
        class="bg-[#1D293D] text-white px-4 py-2 rounded-md hover:shadow-[0_2px_10px_-2px_rgba(0,0,0,0.7)] transition-shadow"
        >Mostrar más</button
      >
    </div>
  </section>

  <!-- Modal de Edición como componente -->
  <EditModal workData={currentWorkData} />

  <script is:inline>
    document.addEventListener("DOMContentLoaded", function () {

      // Función para verificar el estado admin
      async function checkAdminStatus() {
        try {
          const response = await fetch('http://localhost:8080/api/session/check-admin', {
            credentials: 'include'
          });
          
          if (response.ok) {
            const isAdmin = await response.json();
            updateUI(isAdmin);
          }
        } catch (error) {
          console.error('Error checking admin status:', error);
        }
      }
      
      // Función para actualizar la UI basada en el estado admin
      function updateUI(isAdmin) {
        document.querySelectorAll('.edit-btn').forEach(btn => {
          btn.classList.toggle('hidden', !isAdmin);
        });
      }
      document.addEventListener('adminStatusChanged', (event) => {
        updateUI(event.detail.isAdmin);
      });
      
      // Verificar estado al cargar
      checkAdminStatus();

      // Funciones globales para mostrar/ocultar modales
      window.showModal = function(modalId) {
        document.getElementById(modalId)?.classList.remove('hidden');
      }
      
      window.hideModal = function(modalId) {
        document.getElementById(modalId)?.classList.add('hidden');
      }

      // Manejar el modal de edición
      const editForm = document.getElementById('edit-form');
      
      // Abrir modal al hacer clic en editar
      document.addEventListener('click', function(e) {
        if (e.target.closest('.edit-btn')) {
          const article = e.target.closest('.publication-entry');
          const workData = JSON.parse(article.getAttribute('data-work'));
          window.currentWorkData = workData;
          
          // Llenar el formulario con los datos actuales
          fillForm(workData);
          showModal('edit-modal');
        }
      });

      // Función para llenar el formulario
      function fillForm(workData) {
        document.getElementById('putCode').value = workData.putCode || '';
        document.getElementById('title').value = workData.title || '';
        document.getElementById('description').value = workData.description || '';
        document.getElementById('participants').value = workData.participants ? workData.participants.join(', ') : '';
        document.getElementById('externalIds').value = workData.externalIds ? workData.externalIds.join(', ') : '';
        document.getElementById('ownerOrcids').value = workData.ownerOrcids ? workData.ownerOrcids.join(', ') : '';
        document.getElementById('projectDate').value = workData.projectDate || '';
        // ProjectId -> ProjectName (para que el usuario pueda interactuar mejor con el nombre que con el ID)
        document.getElementById('projectId').value = workData.projectName || '';
        document.getElementById('tags').value = workData.tags ? workData.tags.join(', ') : '';
      }

      // Manejar envío del formulario
      editForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!window.currentWorkData) return;

        // Recopilar datos del formulario
        const formData = new FormData(editForm);
        const updatedWork = {
          ...window.currentWorkData,
          putCode: formData.get('putCode') || null,
          title: formData.get('title'),
          description: formData.get('description') || null,
          participants: formData.get('participants') ? 
            formData.get('participants').split(',').map(p => p.trim()).filter(p => p) : [],
          externalIds: formData.get('externalIds') ? 
            formData.get('externalIds').split(',').map(id => id.trim()).filter(id => id) : [],
          ownerOrcids: formData.get('ownerOrcids') ? 
            formData.get('ownerOrcids').split(',').map(orcid => orcid.trim()).filter(orcid => orcid) : [],
          projectDate: formData.get('projectDate'),
          projectId: formData.get('projectId') || null,
          tags: formData.get('tags') ? 
            formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag) : []
        };

        try {
          const response = await fetch('http://localhost:8080/api/works/save', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify(updatedWork)
          });

          if (response.ok) {
            // Mostrar mensaje de éxito
            alert('Publicación actualizada correctamente');
            hideModal('edit-modal');
            // Recargar la página para mostrar los cambios
            window.location.reload();
          } else {
            const errorText = await response.text();
            throw new Error(`Error ${response.status}: ${errorText}`);
          }
        } catch (error) {
          console.error('Error al guardar:', error);
          alert('Error al guardar los cambios: ' + error.message);
        }
      });

      // Resto del código existente...
      let visibleItems = 10;
      const articles = Array.from(
        document.querySelectorAll(".publication-entry"),
      );
      const categoryButtons = document.querySelectorAll(".category-btn");
      let activeFilters = new Set();

      categoryButtons.forEach((btn) => {
        btn.addEventListener("click", function () {
          const category = this.dataset.category;
          const type = this.dataset.type;
          const isActive = this.classList.contains("active-filter");

          if (isActive) {
            if (type === "project") {
              this.classList.remove(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-blue-600",
                "text-white",
                "border-blue-600",
              );
              this.classList.add(
                "bg-blue-50",
                "text-blue-800",
                "border-blue-200",
                "hover:bg-blue-100",
              );
            } else {
              this.classList.remove(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-[#1D293D]",
                "text-white",
                "border-[#1D293D]",
              );
              this.classList.add(
                "bg-white",
                "text-gray-800",
                "border-gray-200",
                "hover:bg-[#1D293D]",
                "hover:text-white",
              );
            }
            this.querySelector(".close-icon").classList.add("hidden");
            activeFilters.delete(category);
          } else {
            if (type === "project") {
              this.classList.add(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-blue-600",
                "text-white",
                "border-blue-600",
              );
              this.classList.remove(
                "bg-blue-50",
                "text-blue-800",
                "border-blue-200",
                "hover:bg-blue-100",
              );
            } else {
              this.classList.add(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-[#1D293D]",
                "text-white",
                "border-[#1D293D]",
              );
              this.classList.remove(
                "bg-white",
                "text-gray-800",
                "border-gray-200",
                "hover:bg-[#1D293D]",
                "hover:text-white",
              );
            }
            this.querySelector(".close-icon").classList.remove("hidden");
            activeFilters.add(category);
          }

          updateArticlesDisplay();
        });
      });

      function updateArticlesDisplay() {
        const yearFilter = document.getElementById("year-filter");
        const selectedYear = yearFilter ? yearFilter.value : "all";
        let visibleCount = 0;

        articles.forEach((article) => {
          const tagsStr = article.getAttribute("data-tags") || "";
          const tags = tagsStr.split(",").map((t) => t.trim());
          const projectName = article.getAttribute("data-project-name") || "";
          const articleYear = article.getAttribute("data-year");

          const allArticleCategories = [...tags];
          if (projectName && projectName.trim() !== "") {
            allArticleCategories.push(projectName);
          }

          let categoryFilterPassed = false;
          
          if (activeFilters.size === 0) {
            categoryFilterPassed = true;
          } else {
            categoryFilterPassed = Array.from(activeFilters).every(filter => 
              allArticleCategories.includes(filter)
            );
          }

          const yearFilterPassed =
            selectedYear === "all" || articleYear === selectedYear;

          const shouldShow =
            categoryFilterPassed &&
            yearFilterPassed &&
            visibleCount < visibleItems;

          article.style.display = shouldShow ? "block" : "none";
          if (shouldShow) visibleCount++;
        });

        const loadMoreBtn = document.getElementById("load-more");
        if (loadMoreBtn) {
          loadMoreBtn.style.display =
            visibleCount >= visibleItems ? "inline-block" : "none";
        }
      }

      const yearFilter = document.getElementById("year-filter");
      if (yearFilter)
        yearFilter.addEventListener("change", updateArticlesDisplay);

      const searchInput = document.getElementById("search-input");
      if (searchInput) {
        searchInput.addEventListener("input", () => {
          const searchTerm = searchInput.value.toLowerCase();

          articles.forEach((article) => {
            const title =
              article.querySelector("h3")?.textContent.toLowerCase() || "";
            const authors =
              article
                .querySelector("p.text-sm.text-gray-700")
                ?.textContent.toLowerCase() || "";
            const shouldShow =
              title.includes(searchTerm) || authors.includes(searchTerm);
            article.style.display = shouldShow ? "block" : "none";
          });
        });
      }

      const loadMoreBtn = document.getElementById("load-more");
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", () => {
          visibleItems += 10;
          updateArticlesDisplay();
        });
      }

      updateArticlesDisplay();
    });
  </script>

  <style>
    .category-btn {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }
    .category-btn:hover:not(.active-filter) {
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .category-btn.active-filter {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
    }
    .close-icon {
      transition: opacity 0.2s ease;
    }
    .publication-entry {
      transition: box-shadow 0.3s ease;
    }
    #year-filter {
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: none;
      padding-right: 1.75rem;
    }
    .filter-content {
      transition: margin 0.2s ease;
    }
    .category-btn.active-filter .filter-content {
      margin-left: 4px;
    }

    .project-btn {
      background-color: #effdf5;
      color: #1d293d;
      border: 1px solid #bfe5d1;
    }
    .project-btn:hover {
      background-color: #d9fbe5;
    }
    .project-btn.active-filter {
      background-color: #006d38;
      color: white;
      border-color: white;
    }

    /* Animación para el modal */
    .fade-in {
      animation: fadeIn 0.3s ease-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .modal-content {
      animation: modalSlideIn 0.3s ease-out;
    }
    
    @keyframes modalSlideIn {
      from {
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
  </style>
</BaseLayout>