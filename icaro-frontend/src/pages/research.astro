---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/TopUtility.astro";
import NavBar from "@/components/NavBar.astro";
import Header from "@/components/Header.astro";
import EditModal from "@/components/EditResearchModal.astro";
import ResearchTitle from "@/components/CCommon/TitlePages.astro";
import ResearchFilters from "@/components/CResearch/ResearchFilters.astro";
import "@/styles/index.css";

const API_BASE_URL = "http://localhost:8080";
let works = [];

try {
  const res = await fetch(`${API_BASE_URL}/api/works/all`);
  if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);
  works = await res.json();

  works = works.map((work) => {
    const { type, ...cleanWork } = work;
    let tags = [];

    if (work.tags) {
      if (Array.isArray(work.tags)) {
        tags = work.tags
          .filter((t) => t !== null && t !== undefined)
          .map((t) => String(t).trim())
          .filter((t) => t.length > 0);
      } else if (typeof work.tags === "string") {
        tags = work.tags
          .split(",")
          .map((t) => t.trim())
          .filter((t) => t.length > 0);
      } else {
        tags = [String(work.tags).trim()].filter((t) => t.length > 0);
      }
    }

    return {
      ...cleanWork,
      tags: tags,
    };
  });
} catch (e) {
  console.error("Error al obtener trabajos:", e);
  works = [];
}

const projectIds = [
  ...new Set(works.map((work) => work.projectId).filter(Boolean)),
];

const projectNamesMap = new Map();
for (const projectId of projectIds) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/api/project-work/name/${projectId}`,
    );

    if (response.ok) {
      const projectName = await response.text();
      projectNamesMap.set(projectId, projectName);
    } else {
      projectNamesMap.set(projectId, "");
    }
  } catch (error) {
    projectNamesMap.set(projectId, "");
  }
}

const worksWithProjectNames = works.map((work) => {
  const projectName = work.projectId
    ? projectNamesMap.get(work.projectId) || ""
    : "";
  return {
    ...work,
    projectName: projectName,
  };
});

const groupsObj = {};
worksWithProjectNames.forEach((w) => {
  const year = w.projectDate?.slice(0, 4) || "Sin fecha";
  if (!groupsObj[year]) groupsObj[year] = [];
  groupsObj[year].push(w);
});

const noDate = groupsObj["Sin fecha"] || [];
delete groupsObj["Sin fecha"];
const researchGroups = Object.entries(groupsObj)
  .map(([year, items]) => ({ year, items }))
  .sort((a, b) => b.year.localeCompare(a.year, { numeric: true }));
if (noDate.length) researchGroups.push({ year: "Sin fecha", items: noDate });

const mostRecentYear = researchGroups[0]?.year || "all";

const tagCategories = new Set();
const projectCategories = new Set();

worksWithProjectNames.forEach((work) => {
  work.tags.forEach((tag) => tagCategories.add(tag));
  if (work.projectName && work.projectName.trim() !== "") {
    projectCategories.add(work.projectName);
  }
});

let currentWorkData = null;
---

<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <ResearchTitle />

  <section class="max-w-4xl mx-auto px-4">
    <ResearchFilters 
      tagCategories={tagCategories} 
      projectCategories={projectCategories} 
      researchGroups={researchGroups} 
      mostRecentYear={mostRecentYear} 
    />

    <div class="space-y-8" id="publications">
      {
        researchGroups.map(({ year, items }) =>
          items.map((work) => (
            <article
              class="publication-entry border rounded-lg p-6 shadow-sm bg-white transition-all duration-300 hover:shadow-md relative"
              data-tags={work.tags.join(",")}
              data-project-name={work.projectName || ""}
              data-year={year}
              data-work={JSON.stringify(work)}
            >
              <div class="absolute top-3 right-3 mr-2 flex flex-col gap-2">
                <button
                  class="edit-btn hidden z-10 p-2 rounded-full bg-white/90 hover:bg-gray-100 transition-colors shadow-sm"
                  data-id={work.id}
                  aria-label="Editar"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 text-gray-600"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                  </svg>
                </button>
                <button
                  class="edit-btn delete-btn hidden z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm"
                  data-putcode={work.putCode}
                  data-title={work.title}
                  aria-label="Eliminar"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 text-gray-600"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </button>
              </div>
              <div class="flex flex-wrap gap-2 mb-3">
                {work.tags.map((tag) => (
                  <span class="bg-gray-50 text-gray-800 text-xs px-2 py-1 rounded font-medium border border-gray-200 shadow-sm">
                    {tag}
                  </span>
                ))}
                {work.projectName && work.projectName.trim() !== "" && (
                  <span class="bg-[#effdf5] text-[#1D293D] text-xs px-2 py-1 rounded font-medium border border-[#BFE5D1] shadow-sm">
                    {work.projectName}
                  </span>
                )}
              </div>
              <h3 class="text-xl font-bold text-gray-900 leading-snug mb-2">
                {work.title}
              </h3>
              {work.participants?.length > 0 && (
                <p class="text-sm text-gray-700 mb-1">
                  {work.participants.join(", ")}
                </p>
              )}
              {work.externalIds?.length > 0 && (
                <p class="text-sm italic text-gray-600">
                  DOI: {work.externalIds[0]}
                </p>
              )}
              <p class="text-sm italic text-gray-600">Publicado en: {year}</p>
              <button
                class="mt-4 bg-gray-100 text-gray-800 text-xs px-3 py-1 rounded hover:bg-gray-200 transition"
                type="button"
              >
                BibTeX
              </button>
            </article>
          )),
        )
      }
    </div>

    <div class="text-center mt-8">
      <button
        id="load-more"
        class="bg-[#1D293D] text-white px-4 py-2 rounded-md hover:shadow-[0_2px_10px_-2px_rgba(0,0,0,0.7)] transition-shadow"
        >Mostrar más</button
      >
    </div>
  </section>

  <EditModal workData={currentWorkData} />

  <script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
      async function checkAdminStatus() {
        try {
          const response = await fetch(
            "http://localhost:8080/api/session/check-admin",
            {
              credentials: "include",
            },
          );

          if (response.ok) {
            const isAdmin = await response.json();
            updateUI(isAdmin);
          }
        } catch (error) {
          console.error("Error checking admin status:", error);
        }
      }

      async function deletePublication(putCode, title) {
        if (!putCode) {
          alert("No se proporcionó un Put Code válido.");
          return;
        }

        const confirmDelete = confirm(
          `¿Estás seguro de que deseas eliminar la publicación "${title}"? Esta acción no se puede deshacer.`,
        );
        if (!confirmDelete) return;

        try {
          const response = await fetch(
            `http://localhost:8080/api/works/delete/${putCode}`,
            {
              method: "DELETE",
              credentials: "include",
            },
          );

          if (response.ok) {
            alert("Publicación eliminada correctamente");
            window.location.reload();
          } else {
            const errorText = await response.text();
            throw new Error(`Error ${response.status}: ${errorText}`);
          }
        } catch (error) {
          console.error("Error al eliminar la publicación:", error);
          alert("Error al eliminar la publicación: " + error.message);
        }
      }

      function updateUI(isAdmin) {
        document.querySelectorAll(".edit-btn").forEach((btn) => {
          btn.classList.toggle("hidden", !isAdmin);
        });
        document
          .getElementById("addButton")
          .classList.toggle("hidden", !isAdmin);
      }

      document.addEventListener("adminStatusChanged", (event) => {
        updateUI(event.detail.isAdmin);
      });

      checkAdminStatus();

      window.showModal = function (modalId) {
        document.getElementById(modalId)?.classList.remove("hidden");
      };

      window.hideModal = function (modalId) {
        document.getElementById(modalId)?.classList.add("hidden");
      };

      const editForm = document.getElementById("edit-form");

      document.addEventListener("click", function (e) {
        if (e.target.closest(".edit-btn") && !e.target.closest(".delete-btn")) {
          const article = e.target.closest(".publication-entry");
          const workData = JSON.parse(article.getAttribute("data-work"));
          window.currentWorkData = workData;

          fillForm(workData);
          showModal("edit-modal");
        }

        if (e.target.closest(".delete-btn")) {
          const deleteBtn = e.target.closest(".delete-btn");
          const putCode = deleteBtn.getAttribute("data-putcode");
          const title = deleteBtn.getAttribute("data-title");
          deletePublication(putCode, title);
        }

        if (e.target.closest("#addButton")) {
          window.currentWorkData = null;
          document.getElementById("edit-form").reset();
          showModal("edit-modal");
        }
      });

      function fillForm(workData) {
        document.getElementById("putCode").value = workData.putCode || "";
        document.getElementById("title").value = workData.title || "";
        document.getElementById("description").value =
          workData.description || "";
        document.getElementById("participants").value = workData.participants
          ? workData.participants.join(", ")
          : "";
        document.getElementById("externalIds").value = workData.externalIds
          ? workData.externalIds.join(", ")
          : "";
        document.getElementById("ownerOrcids").value = workData.ownerOrcids
          ? workData.ownerOrcids.join(", ")
          : "";
        document.getElementById("projectDate").value =
          workData.projectDate || "";
        document.getElementById("projectId").value = workData.projectName || "";
        document.getElementById("tags").value = workData.tags
          ? workData.tags.join(", ")
          : "";
      }

      editForm.addEventListener("submit", async function (e) {
        e.preventDefault();

        const formData = new FormData(editForm);
        const updatedWork = window.currentWorkData
          ? { ...window.currentWorkData }
          : {};

        updatedWork.putCode = formData.get("putCode") || null;
        updatedWork.title = formData.get("title");
        updatedWork.description = formData.get("description") || null;
        updatedWork.participants = formData.get("participants")
          ? formData
              .get("participants")
              .split(",")
              .map((p) => p.trim())
              .filter((p) => p)
          : [];
        updatedWork.externalIds = formData.get("externalIds")
          ? formData
              .get("externalIds")
              .split(",")
              .map((id) => id.trim())
              .filter((id) => id)
          : [];
        updatedWork.ownerOrcids = formData.get("ownerOrcids")
          ? formData
              .get("ownerOrcids")
              .split(",")
              .map((orcid) => orcid.trim())
              .filter((orcid) => orcid)
          : [];
        updatedWork.projectDate = formData.get("projectDate");
        updatedWork.projectId = formData.get("projectId") || null;
        updatedWork.tags = formData.get("tags")
          ? formData
              .get("tags")
              .split(",")
              .map((tag) => tag.trim())
              .filter((tag) => tag)
          : [];

        try {
          const response = await fetch("http://localhost:8080/api/works/save", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify(updatedWork),
          });

          if (response.ok) {
            alert(
              window.currentWorkData
                ? "Publicación actualizada correctamente"
                : "Publicación creada correctamente",
            );
            hideModal("edit-modal");
            window.location.reload();
          } else {
            const errorText = await response.text();
            throw new Error(`Error ${response.status}: ${errorText}`);
          }
        } catch (error) {
          console.error("Error al guardar:", error);
          alert("Error al guardar los cambios: " + error.message);
        }
      });

      let visibleItems = 10;
      const articles = Array.from(
        document.querySelectorAll(".publication-entry"),
      );
      const categoryButtons = document.querySelectorAll(".category-btn");
      let activeFilters = new Set();

      categoryButtons.forEach((btn) => {
        btn.addEventListener("click", function () {
          const category = this.dataset.category;
          const type = this.dataset.type;
          const isActive = this.classList.contains("active-filter");

          if (isActive) {
            if (type === "project") {
              this.classList.remove(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-blue-600",
                "text-white",
                "border-blue-600",
              );
              this.classList.add(
                "bg-blue-50",
                "text-blue-800",
                "border-blue-200",
                "hover:bg-blue-100",
              );
            } else {
              this.classList.remove(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-[#1D293D]",
                "text-white",
                "border-[#1D293D]",
              );
              this.classList.add(
                "bg-white",
                "text-gray-800",
                "border-gray-200",
                "hover:bg-[#1D293D]",
                "hover:text-white",
              );
            }
            this.querySelector(".close-icon").classList.add("hidden");
            activeFilters.delete(category);
          } else {
            if (type === "project") {
              this.classList.add(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-blue-600",
                "text-white",
                "border-blue-600",
              );
              this.classList.remove(
                "bg-blue-50",
                "text-blue-800",
                "border-blue-200",
                "hover:bg-blue-100",
              );
            } else {
              this.classList.add(
                "active-filter",
                "pl-3",
                "pr-4",
                "bg-[#1D293D]",
                "text-white",
                "border-[#1D293D]",
              );
              this.classList.remove(
                "bg-white",
                "text-gray-800",
                "border-gray-200",
                "hover:bg-[#1D293D]",
                "hover:text-white",
              );
            }
            this.querySelector(".close-icon").classList.remove("hidden");
            activeFilters.add(category);
          }

          updateArticlesDisplay();
        });
      });

      function updateArticlesDisplay() {
        const yearFilter = document.getElementById("year-filter");
        const selectedYear = yearFilter ? yearFilter.value : "all";
        let visibleCount = 0;

        articles.forEach((article) => {
          const tagsStr = article.getAttribute("data-tags") || "";
          const tags = tagsStr.split(",").map((t) => t.trim());
          const projectName = article.getAttribute("data-project-name") || "";
          const articleYear = article.getAttribute("data-year");

          const allArticleCategories = [...tags];
          if (projectName && projectName.trim() !== "") {
            allArticleCategories.push(projectName);
          }

          let categoryFilterPassed = false;

          if (activeFilters.size === 0) {
            categoryFilterPassed = true;
          } else {
            categoryFilterPassed = Array.from(activeFilters).every((filter) =>
              allArticleCategories.includes(filter),
            );
          }

          const yearFilterPassed =
            selectedYear === "all" || articleYear === selectedYear;

          const shouldShow =
            categoryFilterPassed &&
            yearFilterPassed &&
            visibleCount < visibleItems;

          article.style.display = shouldShow ? "block" : "none";
          if (shouldShow) visibleCount++;
        });

        const loadMoreBtn = document.getElementById("load-more");
        if (loadMoreBtn) {
          loadMoreBtn.style.display =
            visibleCount >= visibleItems ? "inline-block" : "none";
        }
      }

      const yearFilter = document.getElementById("year-filter");
      if (yearFilter)
        yearFilter.addEventListener("change", updateArticlesDisplay);

      const searchInput = document.getElementById("search-input");
      if (searchInput) {
        searchInput.addEventListener("input", () => {
          const searchTerm = searchInput.value.toLowerCase();

          articles.forEach((article) => {
            const title =
              article.querySelector("h3")?.textContent.toLowerCase() || "";
            const authors =
              article
                .querySelector("p.text-sm.text-gray-700")
                ?.textContent.toLowerCase() || "";
            const shouldShow =
              title.includes(searchTerm) || authors.includes(searchTerm);
            article.style.display = shouldShow ? "block" : "none";
          });
        });
      }

      const loadMoreBtn = document.getElementById("load-more");
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", () => {
          visibleItems += 10;
          updateArticlesDisplay();
        });
      }

      updateArticlesDisplay();
    });
  </script>

  <style>
    .publication-entry {
      transition: box-shadow 0.3s ease;
    }

    .fade-in {
      animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    .modal-content {
      animation: modalSlideIn 0.3s ease-out;
    }

    @keyframes modalSlideIn {
      from {
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
  </style>
</BaseLayout>