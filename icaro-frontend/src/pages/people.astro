---
// pages/people.astro
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/TopUtility.astro";
import Header from "@/components/Header.astro";
import NavBar from "@/components/NavBar.astro";
import PersonCard from "@/components/PersonCard.astro";
import "@/styles/index.css";

let people = [];

try {
  const res = await fetch("http://localhost:8080/api/investigators/all");

  if (!res.ok) {
    throw new Error(`Error HTTP: ${res.status}`);
  }

  const invs = await res.json();

  people = invs.map(inv => ({
    name: `${inv.givenNames} ${inv.familyName}`,
    email: inv.email || "",
    role: "",
    phone: "",
    office: "",
    tags: "",
    img: `/assets/people/${inv.orcid}.jpg`,
    orcid: inv.orcid
  }));
} catch (error) {
  console.error("No se pudo obtener la lista de investigadores:", error);
  people = []; 
}
---
<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <section
    class="w-full content-wrap bg-white shadow-md
           max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 mt-10"
  >
    <div class="mb-8 relative inline-block w-full text-center py-2">
      <h2 class="text-2xl font-bold text-[#231F20]">People</h2>
      <span
        class="absolute left-1/2 bottom-0 w-20 h-1 bg-[#006D38] -translate-x-1/2"
      ></span>
    </div>

    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mt-6">
      {people.map(person => (
        <PersonCard person={person} />
      ))}
    </div>
  </section>

  <!-- Modal de edición global -->
  <div id="editModal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
    <div class="modal-overlay absolute inset-0 bg-black/50" onclick="hideEditModal()"></div>
    
    <div class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <h3 id="modalTitle" class="text-xl font-bold mb-4">Editar</h3>
        
        <form id="editForm" class="space-y-4">
          <input type="hidden" id="editOrcid" />
          
          <div>
            <label class="block mb-1 text-sm font-medium">Nombre</label>
            <input
              type="text"
              id="editName"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>
          
          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              type="email"
              id="editEmail"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>
          
          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideEditModal()"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline>
    // Mostrar modal de edición
    function showEditModal(person) {
      document.getElementById('editOrcid').value = person.orcid;
      document.getElementById('editName').value = person.name;
      document.getElementById('editEmail').value = person.email || '';
      document.getElementById('modalTitle').textContent = `Editar ${person.name}`;
      document.getElementById('editModal').classList.remove('hidden');
    }

    // Ocultar modal de edición
    function hideEditModal() {
      document.getElementById('editModal').classList.add('hidden');
    }

    // Manejar el envío del formulario
    document.getElementById('editForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const orcid = document.getElementById('editOrcid').value;
      const name = document.getElementById('editName').value;
      const email = document.getElementById('editEmail').value;
      
      try {
        // Aquí iría tu llamada a la API para actualizar los datos
        const response = await fetch(`http://localhost:8080/api/investigators/${orcid}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name,
            email
          }),
          credentials: 'include'
        });

        if (response.ok) {
          alert('Cambios guardados correctamente');
          hideEditModal();
          // Recargar la página o actualizar solo la tarjeta modificada
          window.location.reload();
        } else {
          throw new Error('Error al guardar los cambios');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al guardar los cambios');
      }
    });

    // Escuchar el evento personalizado para editar una persona
    document.addEventListener('editPerson', (e) => {
      showEditModal(e.detail);
    });

    // Verificar el estado admin periódicamente
    setInterval(async () => {
      try {
        const response = await fetch('http://localhost:8080/api/session/check-admin', {
          credentials: 'include'
        });
        
        if (response.ok) {
          const isAdmin = await response.json();
          document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.classList.toggle('hidden', !isAdmin);
          });
        }
      } catch (error) {
        console.error('Error checking admin status:', error);
      }
    }, 1000);
  </script>

  <style is:global>
    #editModal {
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s ease;
    }
    
    #editModal:not(.hidden) {
      opacity: 1;
      pointer-events: auto;
    }
    
    .modal-content {
      transform: translateY(20px);
      transition: transform 0.2s ease;
    }
    
    #editModal:not(.hidden) .modal-content {
      transform: translateY(0);
    }
  </style>
</BaseLayout>