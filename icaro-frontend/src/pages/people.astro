---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/TopUtility.astro";
import Header from "@/components/Header.astro";
import NavBar from "@/components/NavBar.astro";
import PersonCard from "@/components/PersonCard.astro";
import "@/styles/index.css";

const fetchInvestigadores = async () => {
  try {
    const res = await fetch("http://localhost:8080/api/investigators/all");

    if (!res.ok) {
      throw new Error(`Error HTTP: ${res.status}`);
    }

    const invs = await res.json();

    return invs.map((inv) => ({
      name: inv.givenNames || "",
      email: inv.email || "",
      role: inv.role || "",
      phone: inv.phone || "",
      office: inv.office || "",
      img: `/assets/${inv.orcid}.jpg`,
      orcid: inv.orcid,
    }));
  } catch (error) {
    console.error("No se pudo obtener la lista de investigadores:", error);
    return [];
  }
};

let people = await fetchInvestigadores();
---

<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <section
    class="w-full content-wrap bg-white shadow-md
           max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 mt-10"
  >
    <div class="mb-8 relative inline-block w-full text-center py-2">
      <h2 class="text-2xl font-bold text-[#231F20]">People</h2>
      <span
        class="absolute left-1/2 bottom-0 w-20 h-1 bg-[#006D38] -translate-x-1/2"
      ></span>
    </div>
    <!-- Botón de añadir investigador -->
    <div class="flex justify-end p-3" >
      <button
        id="addButton"
        class="hidden bg-[#006D38] hover:bg-[#005229] text-white font-bold py-2 px-4 rounded flex items-center edit-btn"
        onclick="showAddModal()"
      >
        <i class="fas fa-plus mr-2"></i>
        Añadir Investigador
      </button>
    </div>
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mt-6">
      {people.map((person) => <PersonCard person={person} />)}
    </div>
  </section>

  <!-- Modal para añadir nuevo investigador -->
  <div
    id="addModal"
    class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4 fade-in"
  >
    <div
      class="modal-overlay absolute inset-0 bg-black/50"
      onclick="hideModal('addModal')"
    >
    </div>

    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <h3 class="text-xl font-bold mb-4">Añadir Nuevo Investigador</h3>

        <form id="addForm" class="space-y-4">
          <div>
            <label class="block mb-1 text-sm font-medium">ORCID</label>
            <input
              id="addOrcid"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Nombre y Apellidos</label>
            <input
              id="addName"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>
          
          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              id="addEmail"
              type="email"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Rol</label>
            <input
              id="addRole"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Teléfono</label>
            <input
              id="addPhone"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Oficina</label>
            <input
              id="addOffice"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideModal('addModal')"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal de edición global -->
  <div
    id="editModal"
    class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
    onclick="if (event.target === this) hideEditModal()"
  >
    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <h3 id="modalTitle" class="text-xl font-bold mb-4">
          Editar Investigador
        </h3>

        <form id="editForm" class="space-y-4">
          <input type="hidden" id="editOrcid" />

          <div>
            <label class="block mb-1 text-sm font-medium">Nombre</label>
            <input
              type="text"
              id="editName"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              type="email"
              id="editEmail"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Role</label>
            <input
              type="text"
              id="editRole"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Teléfono</label>
            <input
              type="text"
              id="editPhone"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Oficina</label>
            <input
              type="text"
              id="editOffice"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideEditModal()"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline>
    // Función para mostrar el modal de edición
    function showEditModal(person) {
      document.getElementById("editOrcid").value = person.orcid;
      document.getElementById("editName").value = person.name || "";
      document.getElementById("editEmail").value = person.email || "";
      document.getElementById("editRole").value = person.role || "";
      document.getElementById("editPhone").value = person.phone || "";
      document.getElementById("editOffice").value = person.office || "";

      document.getElementById("modalTitle").textContent =
        `Editar ${person.name}`;
      showModal("editModal");
    }

    // Función para ocultar el modal de edición
    function hideEditModal() {
      hideModal("editModal");
    }

    // Función para mostrar el modal de añadir
    function showAddModal() {
      showModal("addModal");
    }

    // Función para verificar y mostrar botones de administrador
    async function checkAndToggleAdminButtons() {
      try {
        const response = await fetch(
          "http://localhost:8080/api/session/check-admin",
          {
            credentials: "include",
          },
        );

        if (response.ok) {
          const isAdmin = await response.json();
          const editButtons = document.querySelectorAll(".edit-btn");
          const addButton = document.getElementById("addButton");

          editButtons.forEach((btn) => {
            btn.classList.toggle("hidden", !isAdmin);
          });

          if (addButton) {
            addButton.classList.toggle("hidden", !isAdmin);
          }
        }
      } catch (error) {
        console.error("Error checking admin status");
      }
    }

    // Funciones para mostrar/ocultar modales
    function showModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove("hidden");
        setTimeout(() => {
          modal.style.opacity = "1";
          const modalContent = modal.querySelector(".modal-content");
          if (modalContent) {
            modalContent.style.transform = "translateY(0)";
          }
        }, 10);
      }
    }

    function hideModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.style.opacity = "0";
        const modalContent = modal.querySelector(".modal-content");
        if (modalContent) {
          modalContent.style.transform = "translateY(20px)";
        }
        setTimeout(() => {
          modal.classList.add("hidden");
        }, 200);
      }
    }

    // Manejar el envío del formulario de edición
    document
      .getElementById("editForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();

        const orcid = document.getElementById("editOrcid").value;
        const name = document.getElementById("editName").value;
        const email = document.getElementById("editEmail").value;
        const role = document.getElementById("editRole").value;
        const phone = document.getElementById("editPhone").value;
        const office = document.getElementById("editOffice").value;

        try {
          const response = await fetch(
            `http://localhost:8080/api/investigators/${orcid}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                givenNames: name,
                email: email,
                role: role,
                phone: phone,
                office: office,
              }),
              credentials: "include",
            },
          );

          if (response.ok) {
            alert("Cambios guardados correctamente");
            hideEditModal();
            location.reload();
          } else if (response.status === 401 || response.status === 403) {
            throw new Error("No tiene permisos para realizar esta acción");
          } else {
            const errorText = await response.text();
            console.error("Error del servidor:", errorText);
            throw new Error("Error al guardar los cambios: " + response.status);
          }
        } catch (error) {
          console.error("Error:", error);
          alert(error.message || "Error al guardar los cambios");
        }
      });

    document
      .getElementById("addForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();

        const orcid = document.getElementById("addOrcid").value;
        const givenNames = document.getElementById("addName").value;
        const email = document.getElementById("addEmail").value;
        const role = document.getElementById("addRole").value;
        const phone = document.getElementById("addPhone").value;
        const office = document.getElementById("addOffice").value;

        try {
          const response = await fetch(
            "http://localhost:8080/api/investigators/add",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                orcid: orcid,
                givenNames: givenNames, 
                email: email,
                role: role,
                phone: phone,
                office: office,
              }),
              credentials: "include",
            },
          );

          // Verificar respuesta 204 No Content
          if (response.status === 204) {
            alert("Investigador añadido correctamente");
            hideModal("addModal");
            location.reload();
          } else if (response.status === 401 || response.status === 403) {
            throw new Error("No tiene permisos para realizar esta acción");
          } else {
            const errorText = await response.text();
            console.error("Error del servidor:", errorText);
            throw new Error(
              "Error al añadir el investigador: " + response.status,
            );
          }
        } catch (error) {
          console.error("Error:", error);
          alert(error.message || "Error al añadir el investigador");
        }
      });

    document.addEventListener("editPerson", (e) => {
      showEditModal(e.detail);
    });

    // Event listeners
    document.addEventListener("DOMContentLoaded", function () {
      checkAndToggleAdminButtons();
      setInterval(checkAndToggleAdminButtons, 30000);
    });
  </script>
</BaseLayout>
