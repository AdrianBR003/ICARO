---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/CCommon/TopUtility.astro";
import Header from "@/components/CCommon/Header.astro";
import NavBar from "@/components/CCommon/NavBar.astro";
import PersonCard from "@/components/CPeople/PersonCard.astro";
import CTitle from "@/components/CCommon/TitlePages.astro";
import "@/styles/index.css";

const fetchInvestigadores = async () => {
  try {
    const res = await fetch("http://localhost:8080/api/investigators/all");

    if (!res.ok) {
      throw new Error(`Error HTTP: ${res.status}`);
    }

    const invs = await res.json();

    return invs.map((inv) => ({
      name: inv.givenNames || "",
      email: inv.email || "",
      role: inv.role || "",
      phone: inv.phone || "",
      office: inv.office || "",
      img: `/assets/${inv.orcid}.jpg`,
      orcid: inv.orcid,
    }));
  } catch (error) {
    console.error("No se pudo obtener la lista de investigadores:", error);
    return [];
  }
};

let people = await fetchInvestigadores();
---

<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <section
    class="w-full content-wrap bg-white shadow-md
           max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 mt-10"
  >
    <CTitle Title="People" />

    <div class="flex justify-end p-3">
      <button
        id="addButton"
        class="hidden bg-[#006D38] hover:bg-[#005229] text-white font-bold py-2 px-4 rounded flex items-center edit-btn"
        onclick="showAddModal()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-2"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
            clip-rule="evenodd"></path>
        </svg>
        A√±adir Investigador
      </button>
    </div>
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mt-6">
      {people.map((person) => <PersonCard person={person} />)}
    </div>
  </section>

  <!-- Modal para a√±adir nuevo investigador -->
  <div
    id="addModal"
    class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4 fade-in"
  >
    <div
      class="modal-overlay absolute inset-0 bg-black/50"
      onclick="hideModal('addModal')"
    >
    </div>

    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <h3 class="text-xl font-bold mb-4">A√±adir Nuevo Investigador</h3>

        <form id="addForm" class="space-y-4">
          <div>
            <label class="block mb-1 text-sm font-medium">ORCID</label>
            <input
              id="addOrcid"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium"
              >Nombre y Apellidos</label
            >
            <input
              id="addName"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              id="addEmail"
              type="email"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Rol</label>
            <input
              id="addRole"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Tel√©fono</label>
            <input
              id="addPhone"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Oficina</label>
            <input
              id="addOffice"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideModal('addModal')"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal de edici√≥n global -->
  <div
    id="editModal"
    class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
    onclick="if (event.target === this) hideEditModal()"
  >
    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <h3 id="modalTitle" class="text-xl font-bold mb-4">
          Editar Investigador
        </h3>

        <form id="editForm" class="space-y-4">
          <input type="hidden" id="editOrcid" />

          <div>
            <label class="block mb-1 text-sm font-medium">Nombre</label>
            <input
              type="text"
              id="editName"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              type="email"
              id="editEmail"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Role</label>
            <input
              type="text"
              id="editRole"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Tel√©fono</label>
            <input
              type="text"
              id="editPhone"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Oficina</label>
            <input
              type="text"
              id="editOffice"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideEditModal()"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
      console.log('üöÄ [PEOPLE] P√°gina iniciada');
      
      // ============= SISTEMA DE AUTENTICACI√ìN JWT =============
      
      // Helper para generar headers con token JWT
      function getAuthHeaders() {
        const token = localStorage.getItem('adminToken');
        
        const headers = {
          'Content-Type': 'application/json'
        };
        
        // Si existe token, a√±adir header Authorization con Bearer
        if (token) {
          headers['Authorization'] = `Bearer ${token}`;
        }
        
        return headers;
      }
      
      // ============= GESTI√ìN DEL ESTADO ADMIN =============
      let currentAdminStatus = false;
      
      // Verificar estado admin con token JWT
      async function checkAdminStatus() {
        console.log('üîê [PEOPLE] Verificando estado admin...');
        
        try {
          const token = localStorage.getItem('adminToken');
          if (!token) {
            console.log('üîê [PEOPLE] No hay token almacenado');
            currentAdminStatus = false;
            updateAdminElements(false);
            return false;
          }

          console.log('üîê [PEOPLE] Token encontrado, verificando...');
          const response = await fetch('http://localhost:8080/api/auth/verify', {
            headers: { 'Authorization': `Bearer ${token}` }
          });

          if (response.ok) {
            const data = await response.json();
            const isAdmin = data.authenticated && data.isAdmin;
            console.log('üîê [PEOPLE] Verificaci√≥n exitosa:', { isAdmin, username: data.username });
            currentAdminStatus = isAdmin;
            updateAdminElements(isAdmin);
            return isAdmin;
          } else {
            console.log('üîê [PEOPLE] Token inv√°lido, status:', response.status);
            throw new Error('Token inv√°lido');
          }
        } catch (error) {
          console.error('‚ùå [PEOPLE] Error verificando token:', error);
          localStorage.removeItem('adminToken');
          currentAdminStatus = false;
          updateAdminElements(false);
          return false;
        }
      }
      
      // Funci√≥n para manejar errores de autenticaci√≥n
      function handleAuthError(response) {
        if (response.status === 401 || response.status === 403) {
          alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
          localStorage.removeItem('adminToken');
          currentAdminStatus = false;
          updateAdminElements(false);
          window.location.href = '/admin-login';
          return true;
        }
        return false;
      }
      
      // Actualizar elementos admin en la UI
      function updateAdminElements(isAdmin) {
        console.log('üé® [PEOPLE] Actualizando UI admin:', isAdmin);
        
        // Bot√≥n de a√±adir investigador
        const addButton = document.getElementById("addButton");
        if (addButton) {
          if (isAdmin) {
            addButton.classList.remove('hidden');
            addButton.classList.add('flex');
          } else {
            addButton.classList.remove('flex');
            addButton.classList.add('hidden');
          }
        }
        
        // Todos los botones de editar en PersonCard
        const editButtons = document.querySelectorAll(".edit-btn");
        editButtons.forEach((btn) => {
          if (isAdmin) {
            btn.classList.remove('hidden');
            btn.classList.add('flex');
          } else {
            btn.classList.remove('flex');
            btn.classList.add('hidden');
          }
        });
        
        console.log('‚úÖ [PEOPLE] UI actualizada correctamente');
      }
      
      // Escuchar cambios desde TopUtility
      window.addEventListener('adminStatusChanged', function(event) {
        const { isAdmin, source } = event.detail;
        console.log(`üîÑ [PEOPLE] Estado admin cambiado desde ${source}:`, isAdmin);
        currentAdminStatus = isAdmin;
        updateAdminElements(isAdmin);
      });
      
      // Inicializar estado admin al cargar la p√°gina
      checkAdminStatus();
      
      // Verificar estado cada 5 minutos para detectar tokens expirados
      setInterval(() => {
        console.log('‚è∞ [PEOPLE] Verificaci√≥n peri√≥dica del estado admin');
        checkAdminStatus();
      }, 300000);

      // Verificar al volver a la pesta√±a (detectar cambios en otras pesta√±as)
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          console.log('üëÅÔ∏è [PEOPLE] Tab visible, verificando admin status');
          checkAdminStatus();
        }
      });

      // Escuchar cambios en localStorage (para sincronizar entre pesta√±as)
      window.addEventListener('storage', (e) => {
        if (e.key === 'adminToken') {
          console.log('üîÑ [PEOPLE] Token cambiado en localStorage:', e.newValue ? 'Token a√±adido' : 'Token eliminado');
          if (e.newValue) {
            checkAdminStatus();
          } else {
            currentAdminStatus = false;
            updateAdminElements(false);
          }
        }
      });

      // === FUNCIONES DE MODAL (CORREGIDAS) ===
      
      async function showEditModal(person) {
        console.log('‚úèÔ∏è [PEOPLE] Intentando mostrar modal de edici√≥n para:', person.name);
        
        // Verificar permisos ANTES de mostrar el modal
        if (!currentAdminStatus) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }

        // Verificar token v√°lido haciendo una petici√≥n al servidor
        try {
          const token = localStorage.getItem('adminToken');
          if (!token) {
            throw new Error('No hay token');
          }

          console.log('üîê [PEOPLE] Verificando token antes de abrir modal...');
          const response = await fetch('http://localhost:8080/api/auth/verify', {
            headers: { 'Authorization': `Bearer ${token}` }
          });

          if (!response.ok) {
            throw new Error('Token inv√°lido');
          }

          const data = await response.json();
          if (!data.authenticated || !data.isAdmin) {
            throw new Error('Sin permisos de admin');
          }

          // Si llegamos aqu√≠, el usuario tiene permisos v√°lidos
          console.log('‚úÖ [PEOPLE] Permisos verificados, abriendo modal');
          document.getElementById("editOrcid").value = person.orcid;
          document.getElementById("editName").value = person.name || "";
          document.getElementById("editEmail").value = person.email || "";
          document.getElementById("editRole").value = person.role || "";
          document.getElementById("editPhone").value = person.phone || "";
          document.getElementById("editOffice").value = person.office || "";

          document.getElementById("modalTitle").textContent = `Editar ${person.name}`;
          showModal("editModal");

        } catch (error) {
          console.error('‚ùå [PEOPLE] Error verificando permisos:', error);
          alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
          
          // Limpiar token inv√°lido y actualizar UI
          localStorage.removeItem('adminToken');
          currentAdminStatus = false;
          updateAdminElements(false);
          // Opcional: redirigir al login
          window.location.href = '/admin-login';
        }
      }

      function hideEditModal() {
        hideModal("editModal");
      }

      async function showAddModal() {
        console.log('‚ûï [PEOPLE] Intentando mostrar modal de a√±adir');
        
        // Verificar permisos ANTES de mostrar el modal
        if (!currentAdminStatus) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }

        // Verificar token v√°lido haciendo una petici√≥n al servidor
        try {
          const token = localStorage.getItem('adminToken');
          if (!token) {
            throw new Error('No hay token');
          }

          console.log('üîê [PEOPLE] Verificando token antes de abrir modal...');
          const response = await fetch('http://localhost:8080/api/auth/verify', {
            headers: { 'Authorization': `Bearer ${token}` }
          });

          if (!response.ok) {
            throw new Error('Token inv√°lido');
          }

          const data = await response.json();
          if (!data.authenticated || !data.isAdmin) {
            throw new Error('Sin permisos de admin');
          }

          // Si llegamos aqu√≠, el usuario tiene permisos v√°lidos
          console.log('‚úÖ [PEOPLE] Permisos verificados, abriendo modal');
          showModal("addModal");

        } catch (error) {
          console.error('‚ùå [PEOPLE] Error verificando permisos:', error);
          alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
          
          // Limpiar token inv√°lido y actualizar UI
          localStorage.removeItem('adminToken');
          currentAdminStatus = false;
          updateAdminElements(false);
          
          // Opcional: redirigir al login
          // window.location.href = '/admin-login';
        }
      }

      function showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.remove("hidden");
          setTimeout(() => {
            modal.style.opacity = "1";
            const modalContent = modal.querySelector(".modal-content");
            if (modalContent) {
              modalContent.style.transform = "translateY(0)";
            }
          }, 10);
        }
      }

      function hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.style.opacity = "0";
          const modalContent = modal.querySelector(".modal-content");
          if (modalContent) {
            modalContent.style.transform = "translateY(20px)";
          }
          setTimeout(() => {
            modal.classList.add("hidden");
          }, 200);
        }
      }

      // Hacer funciones disponibles globalmente
      window.showEditModal = showEditModal;
      window.showAddModal = showAddModal;
      window.hideModal = hideModal;
      window.hideEditModal = hideEditModal; 

      // === OPERACIONES CON BACKEND (REQUIEREN ADMIN) ===
      
      // Editar investigador - requiere token JWT con ROLE_ADMIN
      document.getElementById("editForm")?.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Verificar permisos antes de procesar
        if (!currentAdminStatus) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }

        const orcid = document.getElementById("editOrcid").value;
        const name = document.getElementById("editName").value;
        const email = document.getElementById("editEmail").value;
        const role = document.getElementById("editRole").value;
        const phone = document.getElementById("editPhone").value;
        const office = document.getElementById("editOffice").value;

        try {
          console.log('‚úèÔ∏è [PEOPLE] Editando investigador:', orcid);
          console.log('üîê [PEOPLE] Headers que se van a enviar:', getAuthHeaders());
          
          const response = await fetch(
            `http://localhost:8080/api/investigators/${orcid}`,
            {
              method: "PUT",
              headers: getAuthHeaders(), // Incluye token JWT
              body: JSON.stringify({
                givenNames: name,
                email: email,
                role: role,
                phone: phone,
                office: office,
              }),
            },
          );

          console.log('üîê [PEOPLE] Respuesta del servidor:', response.status);

          if (response.ok) {
            alert("Cambios guardados correctamente");
            hideEditModal();
            location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            const errorText = await response.text();
            console.error('‚ùå [PEOPLE] Error del servidor:', errorText);
            throw new Error("Error al guardar los cambios: " + response.status);
          }
        } catch (error) {
          console.error('‚ùå [PEOPLE] Error:', error);
          alert(error.message || "Error al guardar los cambios");
        }
      });

      // A√±adir investigador - requiere token JWT con ROLE_ADMIN
      document.getElementById("addForm")?.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Verificar permisos antes de procesar
        if (!currentAdminStatus) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }

        const orcid = document.getElementById("addOrcid").value;
        const givenNames = document.getElementById("addName").value;
        const email = document.getElementById("addEmail").value;
        const role = document.getElementById("addRole").value;
        const phone = document.getElementById("addPhone").value;
        const office = document.getElementById("addOffice").value;

        try {
          console.log('‚ûï [PEOPLE] A√±adiendo investigador:', orcid);
          console.log('üîê [PEOPLE] Headers que se van a enviar:', getAuthHeaders());
          
          const response = await fetch(
            "http://localhost:8080/api/investigators/add",
            {
              method: "POST",
              headers: getAuthHeaders(), // Incluye token JWT
              body: JSON.stringify({
                orcid: orcid,
                givenNames: givenNames,
                email: email,
                role: role,
                phone: phone,
                office: office,
              }),
            },
          );

          console.log('üîê [PEOPLE] Respuesta del servidor:', response.status);

          if (response.status === 204) {
            alert("Investigador a√±adido correctamente");
            hideModal("addModal");
            location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            const errorText = await response.text();
            console.error('‚ùå [PEOPLE] Error del servidor:', errorText);
            throw new Error(
              "Error al a√±adir el investigador: " + response.status,
            );
          }
        } catch (error) {
          console.error('‚ùå [PEOPLE] Error:', error);
          alert(error.message || "Error al a√±adir el investigador");
        }
      });

      // === EVENT LISTENERS ===
      
      // Escuchar eventos desde PersonCard para abrir modal de edici√≥n
      document.addEventListener("editPerson", async (e) => {
        console.log('‚úèÔ∏è [PEOPLE] Evento editPerson recibido:', e.detail);
        await showEditModal(e.detail);
      });
    });
  </script>
</BaseLayout>