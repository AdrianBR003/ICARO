---
import BaseLayout from "@/layouts/BaseLayout.astro";
import TopUtility from "@/components/CCommon/TopUtility.astro";
import Header from "@/components/CCommon/Header.astro";
import NavBar from "@/components/CCommon/NavBar.astro";
import PersonCard from "@/components/CPeople/PersonCard.astro";
import CTitle from "@/components/CCommon/TitlePages.astro";
import "@/styles/index.css";

const fetchInvestigadores = async () => {
  try {
    const res = await fetch("http://localhost:8080/api/investigators/all");

    if (!res.ok) {
      throw new Error(`Error HTTP: ${res.status}`);
    }

    const invs = await res.json();

    return invs.map((inv) => ({
      name: inv.givenNames || "",
      email: inv.email || "",
      role: inv.role || "",
      phone: inv.phone || "",
      office: inv.office || "",
      img: `/assets/${inv.orcid}.jpg`,
      orcid: inv.orcid,
    }));
  } catch (error) {
    console.error("No se pudo obtener la lista de investigadores:", error);
    return [];
  }
};

let people = await fetchInvestigadores();
---

<BaseLayout>
  <section class="max-w-full bg-white shadow-md rounded-lg">
    <TopUtility />
    <Header />
  </section>
  <section class="mt-10 max-w-full bg-white shadow-md">
    <NavBar />
  </section>

  <section
    class="w-full content-wrap bg-white shadow-md
           max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 mt-10"
  >
    <CTitle Title="People" />

    <div class="flex justify-end p-3">
      <button
        id="addButton"
        class="hidden bg-[#006D38] hover:bg-[#005229] text-white font-bold py-2 px-4 rounded flex items-center edit-btn"
        onclick="showAddModal()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-2"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
            clip-rule="evenodd"></path>
        </svg>
        Añadir Investigador
      </button>
    </div>
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mt-6">
      {people.map((person) => <PersonCard person={person} />)}
    </div>
  </section>

  <!-- Modal para añadir nuevo investigador -->
  <div
    id="addModal"
    class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4 fade-in"
  >
    <div
      class="modal-overlay absolute inset-0 bg-black/50"
      onclick="hideModal('addModal')"
    >
    </div>

    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <h3 class="text-xl font-bold mb-4">Añadir Nuevo Investigador</h3>

        <form id="addForm" class="space-y-4">
          <div>
            <label class="block mb-1 text-sm font-medium">ORCID</label>
            <input
              id="addOrcid"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium"
              >Nombre y Apellidos</label
            >
            <input
              id="addName"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              id="addEmail"
              type="email"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Rol</label>
            <input
              id="addRole"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Teléfono</label>
            <input
              id="addPhone"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Oficina</label>
            <input
              id="addOffice"
              type="text"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideModal('addModal')"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal de edición global -->
  <div
    id="editModal"
    class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
    onclick="if (event.target === this) hideEditModal()"
  >
    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <h3 id="modalTitle" class="text-xl font-bold mb-4">
          Editar Investigador
        </h3>

        <form id="editForm" class="space-y-4">
          <input type="hidden" id="editOrcid" />

          <div>
            <label class="block mb-1 text-sm font-medium">Nombre</label>
            <input
              type="text"
              id="editName"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Email</label>
            <input
              type="email"
              id="editEmail"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Role</label>
            <input
              type="text"
              id="editRole"
              required
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Teléfono</label>
            <input
              type="text"
              id="editPhone"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Oficina</label>
            <input
              type="text"
              id="editOffice"
              class="w-full px-3 py-2 border rounded-md"
            />
          </div>

          <div class="flex gap-4 pt-4">
            <button
              type="button"
              onclick="hideEditModal()"
              class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline>
    // === SISTEMA DE AUTENTICACIÓN ===
    
    // Helper para generar headers con token JWT
    function getAuthHeaders() {
      const token = localStorage.getItem('adminToken');
      
      const headers = {
        'Content-Type': 'application/json'
      };
      
      // Si existe token, añadir header Authorization con Bearer
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      return headers;
    }

    // === FUNCIONES DE MODAL ===
    
    function showEditModal(person) {
      document.getElementById("editOrcid").value = person.orcid;
      document.getElementById("editName").value = person.name || "";
      document.getElementById("editEmail").value = person.email || "";
      document.getElementById("editRole").value = person.role || "";
      document.getElementById("editPhone").value = person.phone || "";
      document.getElementById("editOffice").value = person.office || "";

      document.getElementById("modalTitle").textContent = `Editar ${person.name}`;
      showModal("editModal");
    }

    function hideEditModal() {
      hideModal("editModal");
    }

    function showAddModal() {
      showModal("addModal");
    }

    function showModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove("hidden");
        setTimeout(() => {
          modal.style.opacity = "1";
          const modalContent = modal.querySelector(".modal-content");
          if (modalContent) {
            modalContent.style.transform = "translateY(0)";
          }
        }, 10);
      }
    }

    function hideModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.style.opacity = "0";
        const modalContent = modal.querySelector(".modal-content");
        if (modalContent) {
          modalContent.style.transform = "translateY(20px)";
        }
        setTimeout(() => {
          modal.classList.add("hidden");
        }, 200);
      }
    }

    // === OPERACIONES CON BACKEND (REQUIEREN ADMIN) ===
    
    // Editar investigador - requiere token JWT con ROLE_ADMIN
    document.getElementById("editForm")?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const orcid = document.getElementById("editOrcid").value;
      const name = document.getElementById("editName").value;
      const email = document.getElementById("editEmail").value;
      const role = document.getElementById("editRole").value;
      const phone = document.getElementById("editPhone").value;
      const office = document.getElementById("editOffice").value;

      try {
        const response = await fetch(
          `http://localhost:8080/api/investigators/${orcid}`,
          {
            method: "PUT",
            headers: getAuthHeaders(), // Incluye token JWT si existe
            body: JSON.stringify({
              givenNames: name,
              email: email,
              role: role,
              phone: phone,
              office: office,
            }),
          },
        );

        if (response.ok) {
          alert("Cambios guardados correctamente");
          hideEditModal();
          location.reload();
        } else if (response.status === 401 || response.status === 403) {
          // Token inválido o sin permisos de admin
          alert("No tiene permisos para realizar esta acción. Por favor, inicie sesión como administrador.");
          window.location.href = '/admin-login';
        } else {
          const errorText = await response.text();
          console.error("Error del servidor:", errorText);
          throw new Error("Error al guardar los cambios: " + response.status);
        }
      } catch (error) {
        console.error("Error:", error);
        alert(error.message || "Error al guardar los cambios");
      }
    });

    // Añadir investigador - requiere token JWT con ROLE_ADMIN
    document.getElementById("addForm")?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const orcid = document.getElementById("addOrcid").value;
      const givenNames = document.getElementById("addName").value;
      const email = document.getElementById("addEmail").value;
      const role = document.getElementById("addRole").value;
      const phone = document.getElementById("addPhone").value;
      const office = document.getElementById("addOffice").value;

      try {
        const response = await fetch(
          "http://localhost:8080/api/investigators/add",
          {
            method: "POST",
            headers: getAuthHeaders(), // Incluye token JWT si existe
            body: JSON.stringify({
              orcid: orcid,
              givenNames: givenNames,
              email: email,
              role: role,
              phone: phone,
              office: office,
            }),
          },
        );

        if (response.status === 204) {
          alert("Investigador añadido correctamente");
          hideModal("addModal");
          location.reload();
        } else if (response.status === 401 || response.status === 403) {
          // Token inválido o sin permisos de admin
          alert("No tiene permisos para realizar esta acción. Por favor, inicie sesión como administrador.");
          window.location.href = '/admin-login';
        } else {
          const errorText = await response.text();
          console.error("Error del servidor:", errorText);
          throw new Error(
            "Error al añadir el investigador: " + response.status,
          );
        }
      } catch (error) {
        console.error("Error:", error);
        alert(error.message || "Error al añadir el investigador");
      }
    });

    // === GESTIÓN DE VISIBILIDAD DE CONTROLES ADMIN ===
    
    // Actualizar visibilidad de botones según estado de admin
    function updateAdminVisibility(isAdmin) {
      const editButtons = document.querySelectorAll(".edit-btn");
      const addButton = document.getElementById("addButton");

      editButtons.forEach((btn) => {
        btn.classList.toggle("hidden", !isAdmin);
      });

      if (addButton) {
        addButton.classList.toggle("hidden", !isAdmin);
      }
    }

    // Verificar estado admin inicial desde token almacenado
    async function checkInitialAdminStatus() {
      try {
        const token = localStorage.getItem("adminToken");
        if (!token) {
          updateAdminVisibility(false);
          return;
        }

        // Verificar token con backend
        const response = await fetch("http://localhost:8080/api/auth/verify", {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (response.ok) {
          const data = await response.json();
          updateAdminVisibility(data.authenticated && data.isAdmin);
        } else {
          updateAdminVisibility(false);
        }
      } catch (error) {
        console.error("Error checking admin status:", error);
        updateAdminVisibility(false);
      }
    }

    // === EVENT LISTENERS ===
    
    // Escuchar eventos desde PersonCard para abrir modal de edición
    document.addEventListener("editPerson", (e) => {
      showEditModal(e.detail);
    });

    // Escuchar cambios de estado admin desde TopUtility
    window.addEventListener("adminStatusChanged", (event) => {
      const { isAdmin } = event.detail;
      updateAdminVisibility(isAdmin);
    });

    // Inicialización al cargar la página
    document.addEventListener("DOMContentLoaded", function () {
      checkInitialAdminStatus();
      // Verificar estado cada 30 segundos
      setInterval(checkInitialAdminStatus, 30000);
    });
  </script>
</BaseLayout>