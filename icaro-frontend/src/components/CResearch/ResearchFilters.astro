---
const { tagCategories, projectCategories, researchGroups, mostRecentYear } = Astro.props;
---

<div class="mb-10">
  <div class="relative max-w-full">
    <span
      class="absolute inset-y-0 left-0 flex items-center pl-4 text-gray-500"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
        class="w-5 h-5"
      >
        <path
          fill-rule="evenodd"
          d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z"
          clip-rule="evenodd"></path>
      </svg>
    </span>
    <input
      id="search-input"
      type="search"
      placeholder="Buscar publicaciones por título o autor..."
      class="w-full pl-11 pr-4 py-3 border border-gray-300 rounded-lg text-gray-800 focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition"
    />
  </div>
</div>

<div class="mb-10">
  <div class="mb-4">
    <div class="flex flex-wrap gap-3 items-center">
      {
        Array.from(tagCategories).map((category) => (
          <button
            type="button"
            class="category-btn bg-white text-gray-800 px-4 py-2 rounded-md font-medium border border-gray-200 shadow-sm hover:bg-[#1D293D] hover:text-white transition-all duration-300 flex items-center"
            data-category={category}
            data-type="tag"
          >
            <span class="filter-content flex items-center gap-2">
              <svg
                class="close-icon hidden w-3 h-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
              <span>{category}</span>
            </span>
          </button>
        ))
      }
    </div>
  </div>

  <div class="border-t border-gray-200 pt-4">
    <div class="flex flex-wrap gap-3 items-center">
      {
        Array.from(projectCategories).map((category) => (
          <button
            type="button"
            class="category-btn project-btn bg-blue-50 text-blue-800 px-4 py-2 rounded-md font-medium border border-blue-200 shadow-sm hover:bg-blue-100 transition-all duration-300 flex items-center"
            data-category={category}
            data-type="project"
          >
            <span class="filter-content flex items-center gap-2">
              <svg
                class="close-icon hidden w-3 h-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
              <span>{category}</span>
            </span>
          </button>
        ))
      }
    </div>
  </div>
</div>

<div class="flex justify-between items-center mb-6">
  <div class="flex items-center gap-3 ml-auto">
    <span class="text-sm text-gray-600">Año:</span>
    <div class="relative">
      <select
        id="year-filter"
        class="appearance-none bg-white border border-gray-300 rounded-md px-3 py-1 pr-7 text-sm focus:ring-1 focus:ring-blue-500 focus:border-blue-500 transition cursor-pointer"
      >
        <option value="all">Todos</option>
        {
          researchGroups.map(({ year }) => (
            <option value={year} selected={year === mostRecentYear}>
              {year}
            </option>
          ))
        }
      </select>
      <div
        class="pointer-events-none absolute inset-y-0 right-1 flex items-center px-1 text-gray-500"
      >
        <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
          <path
            fill-rule="evenodd"
            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
        </svg>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // ============= FUNCIONALIDAD DE FILTROS =============
  function initializeFilters() {
    console.log('🔍 [FILTERS] Inicializando filtros');
    
    let visibleItems = 10;
    const articles = Array.from(document.querySelectorAll(".publication-entry"));
    const categoryButtons = document.querySelectorAll(".category-btn");
    let activeFilters = new Set();

    // Event listeners para botones de categoría
    categoryButtons.forEach((btn) => {
      btn.addEventListener("click", function () {
        const category = this.dataset.category;
        const type = this.dataset.type;
        const isActive = this.classList.contains("active-filter");

        if (isActive) {
          // Remover filtro activo
          if (type === "project") {
            this.classList.remove(
              "active-filter",
              "pl-3",
              "pr-4",
              "bg-blue-600",
              "text-white",
              "border-blue-600",
            );
            this.classList.add(
              "bg-blue-50",
              "text-blue-800",
              "border-blue-200",
              "hover:bg-blue-100",
            );
          } else {
            this.classList.remove(
              "active-filter",
              "pl-3",
              "pr-4",
              "bg-[#1D293D]",
              "text-white",
              "border-[#1D293D]",
            );
            this.classList.add(
              "bg-white",
              "text-gray-800",
              "border-gray-200",
              "hover:bg-[#1D293D]",
              "hover:text-white",
            );
          }
          this.querySelector(".close-icon").classList.add("hidden");
          activeFilters.delete(category);
        } else {
          // Activar filtro
          if (type === "project") {
            this.classList.add(
              "active-filter",
              "pl-3",
              "pr-4",
              "bg-blue-600",
              "text-white",
              "border-blue-600",
            );
            this.classList.remove(
              "bg-blue-50",
              "text-blue-800",
              "border-blue-200",
              "hover:bg-blue-100",
            );
          } else {
            this.classList.add(
              "active-filter",
              "pl-3",
              "pr-4",
              "bg-[#1D293D]",
              "text-white",
              "border-[#1D293D]",
            );
            this.classList.remove(
              "bg-white",
              "text-gray-800",
              "border-gray-200",
              "hover:bg-[#1D293D]",
              "hover:text-white",
            );
          }
          this.querySelector(".close-icon").classList.remove("hidden");
          activeFilters.add(category);
        }

        updateArticlesDisplay();
      });
    });

    // Función para actualizar la visualización de artículos
    function updateArticlesDisplay() {
      const yearFilter = document.getElementById("year-filter");
      const selectedYear = yearFilter ? yearFilter.value : "all";
      let visibleCount = 0;

      articles.forEach((article) => {
        const tagsStr = article.getAttribute("data-tags") || "";
        const tags = tagsStr.split(",").map((t) => t.trim());
        const projectName = article.getAttribute("data-project-name") || "";
        const articleYear = article.getAttribute("data-year");

        const allArticleCategories = [...tags];
        if (projectName && projectName.trim() !== "") {
          allArticleCategories.push(projectName);
        }

        let categoryFilterPassed = false;

        if (activeFilters.size === 0) {
          categoryFilterPassed = true;
        } else {
          categoryFilterPassed = Array.from(activeFilters).every((filter) =>
            allArticleCategories.includes(filter),
          );
        }

        const yearFilterPassed =
          selectedYear === "all" || articleYear === selectedYear;

        const shouldShow =
          categoryFilterPassed &&
          yearFilterPassed &&
          visibleCount < visibleItems;

        article.style.display = shouldShow ? "block" : "none";
        if (shouldShow) visibleCount++;
      });

      const loadMoreBtn = document.getElementById("load-more");
      if (loadMoreBtn) {
        loadMoreBtn.style.display =
          visibleCount >= visibleItems ? "inline-block" : "none";
      }
    }

    // Event listener para filtro de año
    const yearFilter = document.getElementById("year-filter");
    if (yearFilter) {
      yearFilter.addEventListener("change", updateArticlesDisplay);
    }

    // Event listener para búsqueda
    const searchInput = document.getElementById("search-input");
    if (searchInput) {
      searchInput.addEventListener("input", () => {
        const searchTerm = searchInput.value.toLowerCase();

        articles.forEach((article) => {
          const title =
            article.querySelector("h3")?.textContent.toLowerCase() || "";
          const authors =
            article
              .querySelector("p.text-sm.text-gray-700")
              ?.textContent.toLowerCase() || "";
          const shouldShow =
            title.includes(searchTerm) || authors.includes(searchTerm);
          article.style.display = shouldShow ? "block" : "none";
        });
      });
    }

    // Event listener para botón "Mostrar más"
    const loadMoreBtn = document.getElementById("load-more");
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener("click", () => {
        visibleItems += 10;
        updateArticlesDisplay();
      });
    }

    // Función para exponer la funcionalidad al scope global
    window.updateArticlesDisplay = updateArticlesDisplay;
    window.increaseVisibleItems = () => {
      visibleItems += 10;
      updateArticlesDisplay();
    };

    // Inicializar visualización
    updateArticlesDisplay();
    
    console.log('✅ [FILTERS] Filtros inicializados correctamente');
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }
</script>

<style>
  .category-btn {
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }
  .category-btn:hover:not(.active-filter) {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  .category-btn.active-filter {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
  }
  .close-icon {
    transition: opacity 0.2s ease;
  }
  .filter-content {
    transition: margin 0.2s ease;
  }
  .category-btn.active-filter .filter-content {
    margin-left: 4px;
  }

  .project-btn {
    background-color: #effdf5;
    color: #1d293d;
    border: 1px solid #bfe5d1;
  }
  .project-btn:hover {
    background-color: #d9fbe5;
  }
  .project-btn.active-filter {
    background-color: #006d38;
    color: white;
    border-color: white;
  }

  #year-filter {
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: none;
    padding-right: 1.75rem;
  }
</style>