---
export interface Props {
  work: {
    putCode: string;
    title: string;
    [key: string]: any;
  };
  cardId: string;
  isAdmin?: boolean;
}

const { work, cardId, isAdmin = false } = Astro.props;
---

{work && work.putCode && work.title ? (
  <>
    <button
      class={`delete-btn ${isAdmin ? 'block' : 'hidden'} z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm`}
      data-putcode={work.putCode}
      data-title={work.title}
      data-card-id={cardId}
      aria-label="Eliminar"
      type="button"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 text-gray-600"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
          clip-rule="evenodd"
        />
      </svg>
    </button>

    <div
      id="deleteWorkModal"
      class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
      onclick="if (event.target === this) hideWorkDeleteModal()"
    >
      <div class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md">
        <div class="p-6">
          <div class="flex items-center justify-center w-12 h-12 mx-auto mb-4 bg-red-100 rounded-full">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.134 16.5c-.77.833.192 2.5 1.732 2.5z"
              ></path>
            </svg>
          </div>

          <h3 class="text-xl font-bold mb-4 text-gray-900 text-center">
            Confirmar Eliminación
          </h3>

          <p class="mb-6 text-gray-700 text-center">
            ¿Está seguro de que desea eliminar <strong id="deleteWorkTitle" class="text-gray-900"></strong>?
            <br />
            <span class="text-sm text-red-600 font-medium">Esta acción no se puede deshacer.</span>
          </p>

          <div class="flex gap-3 pt-4">
            <button
              type="button"
              onclick="hideWorkDeleteModal()"
              class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors flex-1 font-medium text-gray-700"
            >
              Cancelar
            </button>
            <button
              type="button"
              id="confirmWorkDeleteBtn"
              class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex-1 font-medium"
            >
              Eliminar
            </button>
          </div>
        </div>
      </div>
    </div>
  </>

  <script is:inline define:vars={{ work, cardId }}>
    let workToDelete = null;

    document.addEventListener('DOMContentLoaded', function() {
      const cardElement = document.getElementById(cardId);
      if (!cardElement) return;
      
      const deleteBtn = cardElement.querySelector('.delete-btn');
      if (!deleteBtn) return;

      function getAuthHeaders() {
        const token = localStorage.getItem('adminToken');
        const headers = {
          'Content-Type': 'application/json'
        };
        if (token) {
          headers['Authorization'] = `Bearer ${token}`;
        }
        return headers;
      }

      function handleAuthError(response) {
        if (response.status === 401 || response.status === 403) {
          addNotification('error', 'No tiene permisos para realizar esta acción. Por favor, inicie sesión como administrador.');
          localStorage.removeItem('adminToken');
          return true;
        }
        return false;
      }

      async function verifyAdminPermissions() {
        try {
          const token = localStorage.getItem('adminToken');
          if (!token) return false;

          const response = await fetch('http://localhost:8080/api/auth/verify', {
            headers: { 'Authorization': `Bearer ${token}` }
          });

          if (response.ok) {
            const data = await response.json();
            return data.authenticated && data.isAdmin;
          } else {
            localStorage.removeItem('adminToken');
            return false;
          }
        } catch (error) {
          return false;
        }
      }

      function showWorkModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.remove("hidden");
          document.body.style.overflow = "hidden";
        }
      }

      function hideWorkDeleteModal() {
        const modal = document.getElementById("deleteWorkModal");
        if (modal) {
          modal.classList.add("hidden");
          document.body.style.overflow = "";
        }
        workToDelete = null;
      }

      window.hideWorkDeleteModal = hideWorkDeleteModal;

      async function handleDelete() {
        const hasPermissions = await verifyAdminPermissions();
        if (!hasPermissions) {
          addNotification('error', 'Debe iniciar sesión como administrador para realizar esta acción.');
          return;
        }

        const putCode = work?.putCode || deleteBtn.getAttribute('data-putcode');
        const title = work?.title || deleteBtn.getAttribute('data-title');
        
        if (!putCode) {
          addNotification('error', 'Error: No se puede eliminar, falta información.');
          return;
        }

        workToDelete = { putCode, title };
        document.getElementById("deleteWorkTitle").textContent = title || "esta publicación";
        showWorkModal("deleteWorkModal");
      }

      deleteBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        handleDelete();
      });

      const confirmBtn = document.getElementById("confirmWorkDeleteBtn");
      if (confirmBtn) {
        confirmBtn.addEventListener("click", async () => {
          if (!workToDelete) return;

          confirmBtn.disabled = true;
          confirmBtn.textContent = "Eliminando...";

          try {
            const response = await fetch(`http://localhost:8080/api/works/delete/${workToDelete.putCode}`, {
              method: 'DELETE',
              headers: getAuthHeaders(),
            });

            if (response.ok) {
              addNotification("success", 'Publicación eliminada correctamente.');
              hideWorkDeleteModal();
              window.location.reload();
            } else if (handleAuthError(response)) {
              return;
            } else {
              addNotification("error", 'Error al eliminar la publicación. Por favor, intenta nuevamente.');
            }
          } catch (error) {
            addNotification("error", 'Error de conexión. Por favor, intenta nuevamente.');
          } finally {
            confirmBtn.disabled = false;
            confirmBtn.textContent = "Eliminar";
          }
        });
      }
    });

    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        const modal = document.getElementById("deleteWorkModal");
        if (modal && !modal.classList.contains("hidden")) {
          hideWorkDeleteModal();
        }
      }
    });

    function addNotification(type, message) {
      try {
        const notifications = JSON.parse(localStorage.getItem("pendingNotifications") || "[]");
        const notification = {
          id: `stored-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
          message,
          type,
          duration: 4000,
          timestamp: Date.now(),
        };
        notifications.push(notification);
        localStorage.setItem("pendingNotifications", JSON.stringify(notifications));
        return notification.id;
      } catch (error) {
        console.error("Error guardando notificación:", error);
      }
    }
  </script>

  <style is:global>
    .modal {
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease-in-out;
    }

    .modal:not(.hidden) {
      opacity: 1;
      pointer-events: auto;
    }

    .modal-content {
      transform: scale(0.95);
      transition: transform 0.3s ease-in-out;
    }

    .modal:not(.hidden) .modal-content {
      transform: scale(1);
    }
  </style>
) : (
  <p class="text-sm text-gray-500">No se puede eliminar esta publicación.</p>
)}