---
export interface Props {
  work: {
    putCode: string;
    title: string;
    [key: string]: any;
  };
  cardId: string;
  isAdmin?: boolean;
}

const { work, cardId, isAdmin = false } = Astro.props;
---

{work && work.putCode && work.title ? (
  <button
    class={`delete-btn ${isAdmin ? 'block' : 'hidden'} z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm`}
    data-putcode={work.putCode}
    data-title={work.title}
    data-card-id={cardId}
    aria-label="Eliminar"
    type="button"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 text-gray-600"
      viewBox="0 0 20 20"
      fill="currentColor"
    >
      <path
        fill-rule="evenodd"
        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
        clip-rule="evenodd"
      />
    </svg>
  </button>

  <script is:inline define:vars={{ work, cardId }}>
    document.addEventListener('DOMContentLoaded', function() {
      const cardElement = document.getElementById(cardId);
      if (!cardElement) return;
      
      const deleteBtn = cardElement.querySelector('.delete-btn');
      if (!deleteBtn) return;

      // ============= SISTEMA DE AUTENTICACI√ìN JWT =============
      
      // Helper para generar headers con token JWT
      function getAuthHeaders() {
        const token = localStorage.getItem('adminToken');
        
        const headers = {
          'Content-Type': 'application/json'
        };
        
        // Si existe token, a√±adir header Authorization con Bearer
        if (token) {
          headers['Authorization'] = `Bearer ${token}`;
        }
        
        return headers;
      }

      // Funci√≥n para manejar errores de autenticaci√≥n
      function handleAuthError(response) {
        if (response.status === 401 || response.status === 403) {
          alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
          localStorage.removeItem('adminToken');
          // Opcional: redirigir al login
          // window.location.href = '/admin-login';
          return true;
        }
        return false;
      }

      // Verificar si el usuario tiene permisos de admin
      async function verifyAdminPermissions() {
        try {
          const token = localStorage.getItem('adminToken');
          if (!token) {
            return false;
          }

          const response = await fetch('http://localhost:8080/api/auth/verify', {
            headers: { 'Authorization': `Bearer ${token}` }
          });

          if (response.ok) {
            const data = await response.json();
            return data.authenticated && data.isAdmin;
          } else {
            localStorage.removeItem('adminToken');
            return false;
          }
        } catch (error) {
          console.error('‚ùå [DELETE-WORK] Error verificando permisos:', error);
          return false;
        }
      }

      async function handleDelete() {
        console.log('üóëÔ∏è [DELETE-WORK] Intentando eliminar publicaci√≥n');
        
        // Verificar permisos antes de proceder
        const hasPermissions = await verifyAdminPermissions();
        if (!hasPermissions) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }

        const putCode = work?.putCode || deleteBtn.getAttribute('data-putcode');
        const title = work?.title || deleteBtn.getAttribute('data-title');
        
        if (!putCode) {
          alert('Error: No se puede eliminar, falta informaci√≥n.');
          return;
        }

        const confirmed = confirm(`¬øEst√°s seguro de que deseas eliminar "${title}"?`);
        if (!confirmed) return;

        try {
          console.log('üóëÔ∏è [DELETE-WORK] Eliminando publicaci√≥n:', putCode);
          console.log('üîê [DELETE-WORK] Headers que se van a enviar:', getAuthHeaders());
          
          const response = await fetch(`http://localhost:8080/api/works/delete/${putCode}`, {
            method: 'DELETE',
            headers: getAuthHeaders(), // Usar headers con JWT
          });

          console.log('üîê [DELETE-WORK] Respuesta del servidor:', response.status);

          if (response.ok) {
            addNotification("success", 'Publicaci√≥n eliminada correctamente.');
            window.location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            addNotification("error", 'Error al eliminar la publicaci√≥n. Por favor, intenta nuevamente.');
          }
        } catch (error) {
          addNotification("error", 'Error de conexi√≥n. Por favor, intenta nuevamente.');
        }
      }

      deleteBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        handleDelete();
      });
    });

    function addNotification(type, message) {
    console.log("üîç addNotification llamado:", { type, message });
    try {
      const notifications = JSON.parse(
        localStorage.getItem("pendingNotifications") || "[]",
      );

      const notification = {
        id: `stored-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
        message,
        type,
        duration: 4000,
        timestamp: Date.now(),
      };

      notifications.push(notification);
      localStorage.setItem(
        "pendingNotifications",
        JSON.stringify(notifications),
      );

      console.log(
        "üíæ Notificaci√≥n guardada en localStorage para mostrar despu√©s de recargar:",
        notification,
      );

      return notification.id;
    } catch (error) {
      console.error("‚ùå Error guardando notificaci√≥n:", error);
    }
  }

  </script>
) : (
  <p class="text-sm text-gray-500">No se puede eliminar esta publicaci√≥n.</p>
)}