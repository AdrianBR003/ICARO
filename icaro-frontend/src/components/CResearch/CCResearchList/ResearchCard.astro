---
export interface Props {
  work: {
    id: string;
    putCode: string;
    title: string;
    description?: string;
    participants?: string[];
    externalIds?: string[];
    ownerOrcids?: string[];
    projectDate: string;
    projectName?: string;
    tags: string[];
  };
  year: string;
  isAdmin?: boolean;
}

const { work, year, isAdmin = false } = Astro.props;

// Generar un ID √∫nico para esta card
const cardId = `card-${work.id || work.putCode}`;
---

<article
  id={cardId}
  class="publication-entry border rounded-lg p-6 shadow-sm bg-white transition-all duration-300 hover:shadow-md relative"
  data-tags={work.tags.join(",")}
  data-project-name={work.projectName || ""}
  data-year={year}
>
  <div class="absolute top-3 right-3 mr-2 flex flex-col gap-2">
    <button
      class={`edit-btn ${isAdmin ? '' : 'hidden'} z-10 p-2 rounded-full bg-white/90 hover:bg-gray-100 transition-colors shadow-sm`}
      data-card-id={cardId}
      aria-label="Editar"
      type="button"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 text-gray-600"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
      </svg>
    </button>
    <button
      class={`delete-btn ${isAdmin ? '' : 'hidden'} z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm`}
      data-putcode={work.putCode}
      data-title={work.title}
      data-card-id={cardId}
      aria-label="Eliminar"
      type="button"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 text-gray-600"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
          clip-rule="evenodd"
        />
      </svg>
    </button>
  </div>

  <div class="flex flex-wrap gap-2 mb-3">
    {work.tags.map((tag) => (
      <span class="bg-gray-50 text-gray-800 text-xs px-2 py-1 rounded font-medium border border-gray-200 shadow-sm">
        {tag}
      </span>
    ))}
    {work.projectName && work.projectName.trim() !== "" && (
      <span class="bg-[#effdf5] text-[#1D293D] text-xs px-2 py-1 rounded font-medium border border-[#BFE5D1] shadow-sm">
        {work.projectName}
      </span>
    )}
  </div>

  <h3 class="text-xl font-bold text-gray-900 leading-snug mb-2">
    {work.title}
  </h3>

  {work.participants?.length > 0 && (
    <p class="text-sm text-gray-700 mb-1">
      {work.participants.join(", ")}
    </p>
  )}

  {work.externalIds?.length > 0 && (
    <p class="text-sm italic text-gray-600">
      DOI: {work.externalIds[0]}
    </p>
  )}

  <p class="text-sm italic text-gray-600">Publicado en: {year}</p>

  <button
    class="mt-4 bg-gray-100 text-gray-800 text-xs px-3 py-1 rounded hover:bg-gray-200 transition"
    type="button"
  >
    BibTeX
  </button>
</article>

<script is:inline define:vars={{ work, cardId }}>
  console.log('üîÑ ResearchCard script ejecutado para:', cardId);
  console.log('üìã Work data:', work);
  
  // Crear un almac√©n global de datos si no existe
  if (!window.researchData) {
    window.researchData = new Map();
    console.log('üì¶ Almac√©n global de datos creado');
  }
  
  // Almacenar los datos de este work
  window.researchData.set(cardId, work);
  console.log('üíæ Datos almacenados para', cardId);
  
  // Funci√≥n para manejar el click del bot√≥n editar
  function handleEditClick(cardId) {
    console.log('üéØ Manejando click de editar para:', cardId);
    
    const workData = window.researchData.get(cardId);
    console.log('üì§ Datos recuperados del almac√©n:', workData);
    
    if (!workData) {
      console.error('‚ùå No se encontraron datos para la card:', cardId);
      alert('Error: No se encontraron datos para editar');
      return;
    }
    
    // Verificar si la funci√≥n existe
    if (typeof window.showResearchModal === 'function') {
      console.log('‚úÖ showResearchModal encontrado, llamando...');
      console.log('üìã Enviando datos:', workData);
      
      try {
        window.showResearchModal(workData);
        console.log('‚úÖ showResearchModal ejecutado correctamente');
      } catch (error) {
        console.error('‚ùå Error al ejecutar showResearchModal:', error);
        alert('Error al abrir el modal: ' + error.message);
      }
    } else {
      console.error('‚ùå window.showResearchModal no est√° definido');
      console.log('üîç Funciones disponibles que incluyen "Research":', 
        Object.keys(window).filter(key => key.toLowerCase().includes('research')));
      alert('Error: Funci√≥n de modal no disponible');
    }
  }
  
  // Funci√≥n para manejar el click del bot√≥n eliminar
  function handleDeleteClick(putCode, title) {
    console.log('üóëÔ∏è Manejando click de eliminar:', putCode, title);
    
    if (typeof window.deleteResearchPublication === 'function') {
      window.deleteResearchPublication(putCode, title);
    } else {
      console.error('‚ùå window.deleteResearchPublication no est√° definido');
      alert('Error: Funci√≥n de eliminaci√≥n no disponible');
    }
  }
  
  // Inicializar la card
  function initializeCard() {
    console.log('üöÄ Inicializando card:', cardId);
    
    // Buscar espec√≠ficamente dentro de esta card
    const cardElement = document.getElementById(cardId);
    if (!cardElement) {
      console.error('‚ùå No se encontr√≥ el elemento de la card:', cardId);
      return;
    }
    
    // Buscar el bot√≥n de editar dentro de esta card espec√≠fica
    const editBtn = cardElement.querySelector('.edit-btn');
    if (editBtn) {
      // Remover event listeners anteriores si existen
      editBtn.removeEventListener('click', editBtn._editHandler);
      
      // Crear nuevo handler
      editBtn._editHandler = function(e) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        console.log('üëÜ Click detectado en bot√≥n editar de:', cardId);
        handleEditClick(cardId);
      };
      
      editBtn.addEventListener('click', editBtn._editHandler);
      console.log('‚úÖ Event listener de editar agregado para:', cardId);
      
      // Test del bot√≥n
      console.log('üß™ Bot√≥n editar:', {
        cardId: editBtn.getAttribute('data-card-id'),
        classes: editBtn.className,
        visible: !editBtn.classList.contains('hidden')
      });
    } else {
      console.error('‚ùå No se encontr√≥ el bot√≥n editar en:', cardId);
    }
    
    // Buscar el bot√≥n de eliminar dentro de esta card espec√≠fica
    const deleteBtn = cardElement.querySelector('.delete-btn');
    if (deleteBtn) {
      // Remover event listeners anteriores si existen
      deleteBtn.removeEventListener('click', deleteBtn._deleteHandler);
      
      // Crear nuevo handler
      deleteBtn._deleteHandler = function(e) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        console.log('üëÜ Click detectado en bot√≥n eliminar');
        const putCode = deleteBtn.getAttribute('data-putcode');
        const title = deleteBtn.getAttribute('data-title');
        handleDeleteClick(putCode, title);
      };
      
      deleteBtn.addEventListener('click', deleteBtn._deleteHandler);
      console.log('‚úÖ Event listener de eliminar agregado para:', cardId);
    }
    
    console.log('‚úÖ Card inicializada correctamente:', cardId);
  }
  
  // Inicializar cuando est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCard);
    console.log('‚è≥ Esperando DOMContentLoaded para:', cardId);
  } else {
    // DOM ya est√° listo, inicializar inmediatamente
    setTimeout(initializeCard, 10); // Peque√±o delay para asegurar que el elemento est√© en el DOM
    console.log('üöÄ DOM listo, inicializando inmediatamente:', cardId);
  }
</script>

<style>
  .publication-entry {
    transition: box-shadow 0.3s ease;
  }
</style>