---
export interface Props {
  work: {
    id: string;
    putCode: string;
    title: string;
    description?: string;
    participants?: string[];
    externalIds?: string[];
    ownerOrcids?: string[];
    projectDate: string;
    projectName?: string;
    tags: string[];
  };
  isAdmin?: boolean;
}

const { work, isAdmin = false } = Astro.props;
const cardId = `card-${work.id || work.putCode}`;
const modalId = `modal-${work.id || work.putCode}`;
---

<!-- Bot√≥n de editar -->
<button
  class={`edit-btn ${isAdmin ? '' : 'hidden'} z-10 p-2 rounded-full bg-white/90 hover:bg-gray-100 transition-colors shadow-sm`}
  data-card-id={cardId}
  aria-label="Editar"
  type="button"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-5 w-5 text-gray-600"
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
  </svg>
</button>

<!-- Modal de edici√≥n -->
<div
  id={modalId}
  class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
>
  <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
    <div class="p-6">   
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold">Editar Publicaci√≥n</h3>
        <button
          type="button"
          class="close-modal text-gray-500 hover:text-gray-700"
        >
          ‚úï
        </button>
      </div>

      <form class="research-form space-y-4">
        <input type="hidden" name="putCode" value={work.putCode} />

        <div>
          <label class="block mb-1 text-sm font-medium">T√≠tulo *</label>
          <input type="text" name="title" value={work.title} required class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Descripci√≥n</label>
          <textarea name="description" rows="3" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent">{work.description || ""}</textarea>
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Participantes</label>
          <textarea name="participants" rows="2" class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent">{work.participants?.join(", ") || ""}</textarea>
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">IDs Externos (DOI)</label>
          <input type="text" name="externalIds" value={work.externalIds?.join(", ") || ""} class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">ORCID Propietarios</label>
          <input type="text" name="ownerOrcids" value={work.ownerOrcids?.join(", ") || ""} class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Fecha del Proyecto *</label>
          <input type="date" name="projectDate" value={work.projectDate} required class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">T√≠tulo del Proyecto</label>
          <div class="relative">
            <select
              name="projectName"
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent appearance-none bg-white edit-project-select"
            >
              <option value="">Seleccione un proyecto...</option>
              <option value="loading" disabled>Cargando proyectos...</option>
            </select>
            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Etiquetas</label>
          <input type="text" name="tags" value={work.tags?.join(", ") || ""} class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" />
        </div>

        <div class="flex gap-4 pt-4 border-t">
          <button
            type="button"
            class="cancel-btn px-4 py-2 border rounded-md hover:bg-gray-50 transition-colors"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229] transition-colors"
          >
            Guardar
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script is:inline define:vars={{ modalId, cardId, work, isAdmin }}>

  console.log('üîß [RESEARCH-EDIT] Componente iniciado', { isAdmin, work });

  let editProjectTitles = [];

  // ============= SISTEMA DE AUTENTICACI√ìN JWT =============
  
  // Helper para generar headers con token JWT
  function getAuthHeaders() {
    const token = localStorage.getItem('adminToken');
    
    const headers = {
      'Content-Type': 'application/json'
    };
    
    // Si existe token, a√±adir header Authorization con Bearer
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return headers;
  }

  // Funci√≥n para manejar errores de autenticaci√≥n
  function handleAuthError(response) {
    if (response.status === 401 || response.status === 403) {
      alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
      localStorage.removeItem('adminToken');
      // Opcional: redirigir al login
      // window.location.href = '/admin-login';
      return true;
    }
    return false;
  }

  // Verificar si el usuario tiene permisos de admin
  async function verifyAdminPermissions() {
    try {
      const token = localStorage.getItem('adminToken');
      if (!token) {
        return false;
      }

      const response = await fetch('http://localhost:8080/api/auth/verify', {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const data = await response.json();
        return data.authenticated && data.isAdmin;
      } else {
        localStorage.removeItem('adminToken');
        return false;
      }
    } catch (error) {
      console.error('‚ùå [RESEARCH-EDIT] Error verificando permisos:', error);
      return false;
    }
  }

  async function loadEditProjectTitles(selectElement) {
    try {
      console.log('üìã [RESEARCH-EDIT] Cargando t√≠tulos de proyectos para edici√≥n...');
      
      const response = await fetch('http://localhost:8080/api/project/titles', {
        headers: getAuthHeaders() // Usar headers con JWT
      });
      
      if (response.ok) {
        editProjectTitles = await response.json();
        populateEditProjectSelect(selectElement);
        console.log('‚úÖ [RESEARCH-EDIT] T√≠tulos de proyectos cargados:', editProjectTitles);
      } else if (handleAuthError(response)) {
        return;
      } else {
        console.error('‚ùå [RESEARCH-EDIT] Error al cargar t√≠tulos de proyectos:', response.status);
        showEditProjectLoadError(selectElement);
      }
    } catch (error) {
      console.error('‚ùå [RESEARCH-EDIT] Error de conexi√≥n al cargar proyectos:', error);
      showEditProjectLoadError(selectElement);
    }
  }

  function populateEditProjectSelect(selectElement) {
    if (!selectElement) return;
    
    // Guardar el valor actual
    const currentValue = work.projectName || '';
    
    // Limpiar opciones existentes
    selectElement.innerHTML = '<option value="">Seleccione un proyecto...</option>';
    
    // Agregar opciones de proyectos
    editProjectTitles.forEach(title => {
      const option = document.createElement('option');
      option.value = title;
      option.textContent = title;
      // Seleccionar la opci√≥n actual si coincide
      if (title === currentValue) {
        option.selected = true;
      }
      selectElement.appendChild(option);
    });
    
    // Si el valor actual no est√° en la lista, agregarlo como opci√≥n seleccionada
    if (currentValue && !editProjectTitles.includes(currentValue)) {
      const customOption = document.createElement('option');
      customOption.value = currentValue;
      customOption.textContent = currentValue + ' (personalizado)';
      customOption.selected = true;
      selectElement.appendChild(customOption);
    }
  }

  function showEditProjectLoadError(selectElement) {
    if (!selectElement) return;
    
    const currentValue = work.projectName || '';
    
    selectElement.innerHTML = `
      <option value="">Error al cargar proyectos</option>
      <option value="" disabled>Intente recargar la p√°gina</option>
    `;
    
    // Mantener el valor actual aunque haya error
    if (currentValue) {
      const currentOption = document.createElement('option');
      currentOption.value = currentValue;
      currentOption.textContent = currentValue + ' (valor actual)';
      currentOption.selected = true;
      selectElement.appendChild(currentOption);
    }
  }

  function initializeEditComponent() {
    const editBtn = document.querySelector(`#${cardId} .edit-btn`);
    const modal = document.getElementById(modalId);
    const form = modal.querySelector('.research-form');
    const closeBtn = modal.querySelector('.close-modal');
    const cancelBtn = modal.querySelector('.cancel-btn');
    const projectSelect = modal.querySelector('.edit-project-select');

    // Funci√≥n para abrir el modal con verificaci√≥n de permisos
    async function openModal() {
      console.log('üîê [RESEARCH-EDIT] Verificando permisos antes de abrir modal...');
      
      const hasPermissions = await verifyAdminPermissions();
      if (!hasPermissions) {
        alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
        return;
      }

      modal.classList.remove('hidden');
      // Cargar proyectos cuando se abre el modal
      if (editProjectTitles.length === 0 && projectSelect) {
        loadEditProjectTitles(projectSelect);
      }
    }

    // Funci√≥n para cerrar el modal
    function closeModal() {
      modal.classList.add('hidden');
    }

    // Event listeners
    if (editBtn) {
      editBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('üîç [RESEARCH-EDIT] Intentando abrir modal de edici√≥n');
        openModal(); // Ahora es async y verifica permisos
      });
    }

    if (closeBtn) {
      closeBtn.addEventListener('click', closeModal);
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', closeModal);
    }

    // Cerrar modal al hacer click fuera
    if (modal) {
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          closeModal();
        }
      });
    }

    // Manejar env√≠o del formulario
    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Verificar permisos antes de procesar
        const hasPermissions = await verifyAdminPermissions();
        if (!hasPermissions) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }
        
        if (!confirm("¬øEst√°s seguro de que deseas guardar los cambios?")) {
          return;
        }
        
        const formData = new FormData(form);
        const selectedProject = formData.get("projectName");
        
        const workData = {
          putCode: formData.get("putCode"),
          title: formData.get("title"),
          description: formData.get("description"),
          participants: formData.get("participants").split(",").map(item => item.trim()).filter(Boolean),
          externalIds: formData.get("externalIds").split(",").map(item => item.trim()).filter(Boolean),
          ownerOrcids: formData.get("ownerOrcids").split(",").map(item => item.trim()).filter(Boolean),
          projectDate: formData.get("projectDate"),
          projectId: selectedProject || null,
          tags: formData.get("tags").split(",").map(item => item.trim()).filter(Boolean)
        };

        try {
          console.log('üì§ [RESEARCH-EDIT] Enviando datos actualizados:', workData);
          console.log('üîê [RESEARCH-EDIT] Headers que se van a enviar:', getAuthHeaders());
          
          const response = await fetch("http://localhost:8080/api/works/save", {
            method: "POST",
            headers: getAuthHeaders(), // Usar headers con JWT en lugar de credentials
            body: JSON.stringify(workData)
          });

          console.log('üîê [RESEARCH-EDIT] Respuesta del servidor:', response.status);

          if (response.ok) {
            alert("Los cambios se guardaron correctamente.");
            closeModal();
            console.log('‚úÖ [RESEARCH-EDIT] Cambios guardados exitosamente');
            window.location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            let errorMessage = 'Error desconocido';
            try {
              const errorData = await response.json();
              errorMessage = errorData.message || JSON.stringify(errorData);
            } catch {
              errorMessage = await response.text();
            }
            
            console.error('‚ùå [RESEARCH-EDIT] Error del backend:', errorMessage);
            alert("Error al guardar los cambios: " + errorMessage);
          }
        } catch (error) {
          console.error('‚ùå [RESEARCH-EDIT] Error de conexi√≥n:', error);
          alert("Error de conexi√≥n al guardar los cambios: " + error.message);
        }
      });
    }
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeEditComponent);
  } else {
    setTimeout(initializeEditComponent, 10);
  }
</script>

<style>
  .modal {
    transition: opacity 0.3s ease;
  }
  .modal.hidden {
    opacity: 0;
    pointer-events: none;
  }
  .modal:not(.hidden) {
    opacity: 1;
    pointer-events: all;
  }
</style>