---
// Componente PersonCard.astro
const { person } = Astro.props;
const modalId = `modal-${person.id || person.name.toLowerCase().replace(/\s+/g, '-')}`;
---

<article class="person-card flex flex-col gap-4 p-6 bg-white shadow-md rounded-lg transition-all hover:shadow-lg relative">
  <!-- Botón de edición (visible solo en modo admin) -->
  <button 
    class="edit-btn hidden absolute top-3 right-3 p-2 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
    data-modal-id="${modalId}"
    aria-label="Editar tarjeta"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
      <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
    </svg>
  </button>
  
  <!-- Contenido principal de la tarjeta -->
  <div class="card-content">
    <div class="flex items-center gap-4">
      <img
        src={person.img || "/assets/people/default.png"}
        alt={`Foto de ${person.name}`}
        class="w-20 h-20 rounded-full object-cover border-2 border-gray-100"
      />
      <div>
        <h3 class="text-xl font-semibold text-gray-800">{person.name}</h3>
        {person.role && <p class="text-sm text-gray-500">{person.role}</p>}
      </div>
    </div>
    
    <div class="mt-4 space-y-2 text-sm text-gray-600">
      {person.email && (
        <p class="flex items-center gap-2">
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
          </svg>
          {person.email}
        </p>
      )}
      
      {person.phone && (
        <p class="flex items-center gap-2">
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
          </svg>
          {person.phone}
        </p>
      )}
      
      {person.office && (
        <p class="flex items-center gap-2">
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
          </svg>
          {person.office}
        </p>
      )}
    </div>
    
    {person.tags && (
      <div class="mt-4 flex flex-wrap gap-2">
        {person.tags.split(',').map(tag => (
          <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">
            {tag.trim()}
          </span>
        ))}
      </div>
    )}
  </div>

<!-- Modal de edición corregido -->
<div 
  id="${modalId}" 
  class="modal hidden fixed inset-0 flex items-center justify-center z-[100]"
>
  <!-- Fondo oscuro semitransparente -->
  <div class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm"></div>
  
  <!-- Contenido del modal -->
  <div class="relative w-full max-w-2xl mx-4 bg-white rounded-xl shadow-2xl z-[101] transform transition-all duration-300 scale-95 opacity-0">
    <div class="p-6 max-h-[80vh] overflow-y-auto">
      <div class="mb-6">
        <h3 class="text-2xl font-bold text-gray-800">Editar información</h3>
        <p class="text-gray-500">Actualizando datos de {person.name}</p>
      </div>
      
      <form class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block mb-2 font-medium text-gray-700">Nombre completo</label>
            <input
              type="text"
              value={person.name}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
          
          <div>
            <label class="block mb-2 font-medium text-gray-700">Cargo</label>
            <input
              type="text"
              value={person.role || ''}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
          
          <div>
            <label class="block mb-2 font-medium text-gray-700">Email</label>
            <input
              type="email"
              value={person.email || ''}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
          
          <div>
            <label class="block mb-2 font-medium text-gray-700">Teléfono</label>
            <input
              type="tel"
              value={person.phone || ''}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
          
          <div>
            <label class="block mb-2 font-medium text-gray-700">Oficina</label>
            <input
              type="text"
              value={person.office || ''}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
          
          <div>
            <label class="block mb-2 font-medium text-gray-700">Etiquetas (separadas por comas)</label>
            <input
              type="text"
              value={person.tags || ''}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
          
          <div class="md:col-span-2">
            <label class="block mb-2 font-medium text-gray-700">URL de la imagen</label>
            <input
              type="url"
              value={person.img || ''}
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
            />
          </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="pt-6 mt-6 border-t border-gray-200 flex justify-end gap-4">
          <button
            type="button"
            class="cancel-btn px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            data-modal-id="${modalId}"
          >
            Cancelar
          </button>
          <button
            type="button"
            class="save-btn px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            data-modal-id="${modalId}"
          >
            Guardar cambios
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<style is:global>
  /* Transiciones mejoradas para el modal */
  .modal {
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .modal:not(.hidden) {
    opacity: 1;
    visibility: visible;
  }
  
  .modal:not(.hidden) > div:last-child {
    transform: scale(1);
    opacity: 1;
  }
  
  .modal > div:last-child {
    transform: scale(0.95);
    opacity: 0;
    transition: transform 0.3s ease, opacity 0.3s ease;
  }
  
  /* Efecto de desenfoque en el contenido de fondo */
  body.modal-open {
    overflow: hidden;
  }
  
  /* Mejorar la apariencia de los inputs */
  input {
    transition: border-color 0.2s, box-shadow 0.2s;
  }
</style>

<script is:inline>
  // Función para mostrar el modal
  function showModal(modalId) {
    document.body.classList.add('modal-open');
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('hidden');
      // Enfocar el primer campo del formulario
      const firstInput = modal.querySelector('input');
      if (firstInput) firstInput.focus();
    }
  }

  // Función para ocultar el modal
  function hideModal(modalId) {
    document.body.classList.remove('modal-open');
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  // Configurar eventos
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const modalId = btn.getAttribute('data-modal-id');
        showModal(modalId);
      });
    });

    document.querySelectorAll('.cancel-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const modalId = btn.getAttribute('data-modal-id');
        hideModal(modalId);
      });
    });

    // Cerrar modal al hacer clic fuera del contenido
    document.querySelectorAll('.modal').forEach(modal => {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          hideModal(modal.id);
        }
      });
    });
  });
</script>