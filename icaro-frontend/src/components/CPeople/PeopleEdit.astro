---

---

<!-- Modal de edici√≥n global -->
<div
  id="editModal"
  class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
  onclick="if (event.target === this) hideEditModal()"
>
  <div
    class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto"
  >
    <div class="p-6">
      <h3 id="modalTitle" class="text-xl font-bold mb-4">
        Editar Investigador
      </h3>

      <form id="editForm" class="space-y-4">
        <input type="hidden" id="editOrcid" />

        <div>
          <label class="block mb-1 text-sm font-medium">Nombre</label>
          <input
            type="text"
            id="editName"
            required
            class="w-full px-3 py-2 border rounded-md"
          />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Email</label>
          <input
            type="email"
            id="editEmail"
            required
            class="w-full px-3 py-2 border rounded-md"
          />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Role</label>
          <input
            type="text"
            id="editRole"
            required
            class="w-full px-3 py-2 border rounded-md"
          />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Tel√©fono</label>
          <input
            type="text"
            id="editPhone"
            class="w-full px-3 py-2 border rounded-md"
          />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Oficina</label>
          <input
            type="text"
            id="editOffice"
            class="w-full px-3 py-2 border rounded-md"
          />
        </div>

        <div class="flex gap-4 pt-4">
          <button
            type="button"
            onclick="hideEditModal()"
            class="px-4 py-2 border rounded-md hover:bg-gray-50"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
          >
            Guardar
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script is:inline>
  // === FUNCIONES DE EDICI√ìN ===

  async function showEditModal(person) {
    console.log(
      "‚úèÔ∏è [PEOPLE] Intentando mostrar modal de edici√≥n para:",
      person.name,
    );

    if (!window.currentAdminStatus) {
      alert(
        "Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.",
      );
      return;
    }

    try {
      const token = localStorage.getItem("adminToken");
      if (!token) {
        throw new Error("No hay token");
      }

      console.log("üîê [PEOPLE] Verificando token antes de abrir modal...");
      const response = await fetch("http://localhost:8080/api/auth/verify", {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
        throw new Error("Token inv√°lido");
      }

      const data = await response.json();
      if (!data.authenticated || !data.isAdmin) {
        throw new Error("Sin permisos de admin");
      }

      console.log("‚úÖ [PEOPLE] Permisos verificados, abriendo modal");
      document.getElementById("editOrcid").value = person.orcid;
      document.getElementById("editName").value = person.name || "";
      document.getElementById("editEmail").value = person.email || "";
      document.getElementById("editRole").value = person.role || "";
      document.getElementById("editPhone").value = person.phone || "";
      document.getElementById("editOffice").value = person.office || "";

      document.getElementById("modalTitle").textContent =
        `Editar ${person.name}`;
      showModal("editModal");
    } catch (error) {
      console.error("‚ùå [PEOPLE] Error verificando permisos:", error);
      alert(
        "No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.",
      );

      localStorage.removeItem("adminToken");
      window.currentAdminStatus = false;
      window.updateAdminElements(false);
    }
  }

  function hideEditModal() {
    hideModal("editModal");
  }

  // Hacer funciones disponibles globalmente
  window.showEditModal = showEditModal;
  window.hideEditModal = hideEditModal;

  // Editar investigador - requiere token JWT con ROLE_ADMIN
  document.getElementById("editForm")?.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (!window.currentAdminStatus) {
      alert(
        "Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.",
      );
      return;
    }

    const orcid = document.getElementById("editOrcid").value;
    const name = document.getElementById("editName").value;
    const email = document.getElementById("editEmail").value;
    const role = document.getElementById("editRole").value;
    const phone = document.getElementById("editPhone").value;
    const office = document.getElementById("editOffice").value;

    try {
      console.log("‚úèÔ∏è [PEOPLE] Editando investigador:", orcid);
      console.log(
        "üîê [PEOPLE] Headers que se van a enviar:",
        window.getAuthHeaders(),
      );

      const response = await fetch(
        `http://localhost:8080/api/investigators/${orcid}`,
        {
          method: "PUT",
          headers: window.getAuthHeaders(),
          body: JSON.stringify({
            givenNames: name,
            email: email,
            role: role,
            phone: phone,
            office: office,
          }),
        },
      );

      if (response.ok) {
        hideEditModal();
        addNotification("success", "Investigador editado correctamente");
        window.location.reload();
      } else if (window.handleAuthError(response)) {
        return;
      } else {
        const errorText = await response.text();
        throw new Error("Error al guardar los cambios: " + response.status);
      }
    } catch (error) {
      console.error("‚ùå [PEOPLE] Error:", error);
      addNotification("error", "Error editando investigador: " + error.message);
    }
  });

  // Notificaciones:

  function addNotification(type, message) {
    console.log("üîç addNotification llamado:", { type, message });
    try {
      const notifications = JSON.parse(
        localStorage.getItem("pendingNotifications") || "[]",
      );

      const notification = {
        id: `stored-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
        message,
        type,
        duration: 4000,
        timestamp: Date.now(),
      };

      notifications.push(notification);
      localStorage.setItem(
        "pendingNotifications",
        JSON.stringify(notifications),
      );

      console.log(
        "üíæ Notificaci√≥n guardada en localStorage para mostrar despu√©s de recargar:",
        notification,
      );

      return notification.id;
    } catch (error) {
      console.error("‚ùå Error guardando notificaci√≥n:", error);
    }
  }
</script>
