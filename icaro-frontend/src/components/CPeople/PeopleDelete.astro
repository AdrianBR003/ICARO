---
const { person } = Astro.props;
---

<!-- Botón Eliminar -->
<button
  class="edit-btn delete-btn hidden z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm"
  data-orcid={person.orcid}
  data-name={person.name}
  aria-label="Eliminar"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-5 w-5 text-gray-600"
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path
      fill-rule="evenodd"
      d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
      clip-rule="evenodd"></path>
  </svg>
</button>

<script>
  // === SISTEMA DE AUTENTICACIÓN JWT ===
  
  function getAuthHeaders() {
    const token = localStorage.getItem('adminToken');
    const headers = {
      'Content-Type': 'application/json'
    };
    
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return headers;
  }

  // === FUNCIÓN DE ELIMINAR ===
  
  // Eliminar investigador - requiere token JWT con ROLE_ADMIN
  async function deleteInvestigator(orcid, name) {
    if (!confirm(`¿Estás seguro de que deseas eliminar a ${name}? Esta acción no se puede deshacer.`)) {
      return;
    }

    try {
      const response = await fetch(`http://localhost:8080/api/investigators/delete/${orcid}`, {
        method: "DELETE",
        headers: getAuthHeaders(), 
      });

      if (response.status === 204) {
        alert("Investigador eliminado correctamente");
        location.reload();
      } else if (response.status === 401 || response.status === 403) {
        alert("No tiene permisos para realizar esta acción. Por favor, inicie sesión como administrador.");
        window.location.href = '/admin-login';
      } else if (response.status === 404) {
        console.error("Error 404 - Investigador no encontrado:", orcid);
        alert("Investigador no encontrado. Es posible que ya haya sido eliminado.");
      } else {
        const errorText = await response.text();
        console.error("Error del servidor:", errorText);
        throw new Error("Error al eliminar el investigador: " + response.status);
      }
    } catch (error) {
      console.error("Error en deleteInvestigator:", error);
      alert(error.message || "Error al eliminar el investigador");
    }
  }

  // === CONFIGURACIÓN DE BOTONES ===
  
  function setupDeleteButtons() {
    const deleteButtons = document.querySelectorAll(".delete-btn");

    deleteButtons.forEach((button) => {
      // Remover event listeners previos para evitar duplicados
      button.replaceWith(button.cloneNode(true));
    });

    // Reseleccionar después del clonado
    const newDeleteButtons = document.querySelectorAll(".delete-btn");
    
    newDeleteButtons.forEach((button) => {
      button.addEventListener("click", function () {
        const orcid = this.getAttribute("data-orcid");
        const name = this.getAttribute("data-name");
        console.log("Eliminar clicked - ORCID:", orcid, "Name:", name);
        deleteInvestigator(orcid, name);
      });
    });
  }

  // === GESTIÓN DE VISIBILIDAD DE BOTONES ADMIN ===
  
  function updateDeleteButtonVisibility(isAdmin) {
    const deleteButtons = document.querySelectorAll(".delete-btn");

    deleteButtons.forEach((btn) => {
      btn.classList.toggle("hidden", !isAdmin);
    });

    // Configurar event listeners solo cuando es admin
    if (isAdmin) {
      setupDeleteButtons();
    }
  }

  // Verificar estado admin inicial
  async function checkInitialDeleteAdminStatus() {
    try {
      const token = localStorage.getItem("adminToken");
      if (!token) {
        updateDeleteButtonVisibility(false);
        return;
      }

      const response = await fetch("http://localhost:8080/api/auth/verify", {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.ok) {
        const data = await response.json();
        const isAdmin = data.authenticated && data.isAdmin;
        updateDeleteButtonVisibility(isAdmin);
      } else {
        updateDeleteButtonVisibility(false);
      }
    } catch (error) {
      console.error("Error checking admin status for delete buttons:", error);
      updateDeleteButtonVisibility(false);
    }
  }

  // === EVENT LISTENERS ===
  
  // Escuchar cambios de estado admin desde TopUtility
  window.addEventListener("adminStatusChanged", (event) => {
    const { isAdmin } = event.detail;
    updateDeleteButtonVisibility(isAdmin);
  });
  
  // Inicialización
  document.addEventListener("DOMContentLoaded", function () {
    checkInitialDeleteAdminStatus();
  });.ok) {
        const data = await response.json();
        updateDeleteButtonVisibility(data.authenticated && data.isAdmin);
      } else {
        updateDeleteButtonVisibility(false);
      }
    } catch (error) {
      console.error("Error checking admin status for delete buttons:", error);
      updateDeleteButtonVisibility(false);
    }
  }

  // === EVENT LISTENERS ===
  
  // Escuchar cambios de estado admin desde TopUtility
  window.addEventListener("adminStatusChanged", (event) => {
    const { isAdmin } = event.detail;
    updateDeleteButtonVisibility(isAdmin);
  });
  
  // Inicialización
  document.addEventListener("DOMContentLoaded", function () {
    checkInitialDeleteAdminStatus();
  });
</script>