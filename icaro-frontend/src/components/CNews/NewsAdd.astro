---
interface Props {
  isAdmin: boolean;
}
const { isAdmin } = Astro.props;
console.log("isAdmin en NewsAdd:", isAdmin);
---

<!-- Siempre en el DOM, oculto si no es admin -->
<div id="news-add-wrapper" class={isAdmin ? "" : "hidden"}>
  <div class="mb-6 flex justify-center">
    <button
      id="btn-add-news"
      class="bg-[#006D38] hover:bg-[#005229] text-white font-bold py-2 px-4 rounded flex items-center transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 mr-2"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
          clip-rule="evenodd"></path>
      </svg>
      A√±adir Noticia
    </button>
  </div>

  <!-- Modal -->
  <div
    id="modal-add-news"
    class="hidden fixed inset-0 z-50 flex items-center justify-center p-4"
    style="background: rgba(0,0,0,0.5);"
  >
    <div
      class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-bold">Crear Nueva Noticia</h3>
          <button
            type="button"
            id="btn-close-modal"
            class="text-gray-500 hover:text-gray-700">‚úï</button
          >
        </div>

        <form id="form-add-news">
          <div class="space-y-4">
            <!-- ID de la noticia -->
            <div>
              <label class="block mb-1 text-sm font-medium">ID de la noticia</label>
              <input
                type="text"
                id="newsId"
                name="id"
                readonly
                class="w-full px-3 py-2 border rounded-md bg-gray-50 text-gray-500 cursor-not-allowed"
                placeholder="Se generar√° autom√°ticamente"
              />
              <p class="text-xs text-gray-400 mt-1">
                Este ID es de solo lectura y se genera autom√°ticamente
              </p>
            </div>
            
            <!-- T√≠tulo -->
            <div>
              <label class="block mb-1 text-sm font-medium">T√≠tulo *</label>
              <input
                type="text"
                name="title"
                required
                class="w-full px-3 py-2 border rounded-md"
              />
            </div>
            
            <!-- Descripci√≥n -->
            <div>
              <label class="block mb-1 text-sm font-medium">Descripci√≥n *</label>
              <textarea
                name="description"
                rows="4"
                required
                class="w-full px-3 py-2 border rounded-md"></textarea>
            </div>
            
            <!-- Fecha de Publicaci√≥n -->
            <div>
              <label class="block mb-1 text-sm font-medium">Fecha de Publicaci√≥n</label>
              <input
                type="date"
                id="editPublicationDate"
                name="publicationDate"
                class="w-full px-3 py-2 border rounded-md"
              />
              <p class="text-xs text-gray-400 mt-1">
                Fecha en que se publica la noticia (opcional)
              </p>
            </div>
            
            <!-- Enlace -->
            <div>
              <label class="block mb-1 text-sm font-medium">Enlace (URL)</label>
              <input
                type="url"
                name="link"
                class="w-full px-3 py-2 border rounded-md"
                placeholder="https://ejemplo.com"
              />
            </div>

            <!-- Botones -->
            <div class="flex gap-4 pt-4 border-t">
              <button
                type="button"
                id="btn-cancel"
                class="px-4 py-2 border rounded-md hover:bg-gray-50 flex-1">
                Cancelar
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229] flex-1">
                Crear Noticia
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    console.log('üì∞ [NewsAdd] Componente cargado');
    
    // ============= SISTEMA DE AUTENTICACI√ìN JWT =============
    function getAuthHeaders() {
      const token = localStorage.getItem('adminToken');
      const headers = {
        'Content-Type': 'application/json'
      };
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      return headers;
    }
    
    // ============= GESTI√ìN DEL ESTADO ADMIN =============
    let currentAdminStatus = false;
    
    async function checkAdminStatus() {
      console.log('üîê [NewsAdd] Verificando estado admin...');
      
      try {
        const token = localStorage.getItem('adminToken');
        if (!token) {
          console.log('üîê [NewsAdd] No hay token almacenado');
          currentAdminStatus = false;
          updateAdminElements(false);
          return false;
        }

        console.log('üîê [NewsAdd] Token encontrado, verificando...');
        const response = await fetch('http://localhost:8080/api/auth/verify', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
          const data = await response.json();
          const isAdmin = data.authenticated && data.isAdmin;
          console.log('üîê [NewsAdd] Verificaci√≥n exitosa:', { isAdmin, username: data.username });
          currentAdminStatus = isAdmin;
          updateAdminElements(isAdmin);
          return isAdmin;
        } else {
          console.log('üîê [NewsAdd] Token inv√°lido, status:', response.status);
          throw new Error('Token inv√°lido');
        }
      } catch (error) {
        console.error('‚ùå [NewsAdd] Error verificando token:', error);
        localStorage.removeItem('adminToken');
        currentAdminStatus = false;
        updateAdminElements(false);
        return false;
      }
    }
    
    function handleAuthError(response) {
      if (response.status === 401 || response.status === 403) {
        alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
        localStorage.removeItem('adminToken');
        currentAdminStatus = false;
        updateAdminElements(false);
        window.location.href = '/admin-login';
        return true;
      }
      return false;
    }
    
    function updateAdminElements(isAdmin) {
      console.log('üé® [NewsAdd] Actualizando UI admin:', isAdmin);
      
      const wrapper = document.getElementById("news-add-wrapper");
      if (wrapper) {
        if (isAdmin) {
          wrapper.classList.remove('hidden');
        } else {
          wrapper.classList.add('hidden');
        }
      }
      
      console.log('‚úÖ [NewsAdd] UI actualizada correctamente');
    }
    
    // Escuchar cambios desde TopUtility
    window.addEventListener('adminStatusChanged', function(event) {
      const { isAdmin, source } = event.detail;
      console.log(`üîÑ [NewsAdd] Estado admin cambiado desde ${source}:`, isAdmin);
      currentAdminStatus = isAdmin;
      updateAdminElements(isAdmin);
    });
    
    // Inicializar estado admin al cargar la p√°gina
    checkAdminStatus();
    
    // Verificar estado cada 5 minutos para detectar tokens expirados
    setInterval(() => {
      console.log('‚è∞ [NewsAdd] Verificaci√≥n peri√≥dica del estado admin');
      checkAdminStatus();
    }, 300000);

    // Verificar al volver a la pesta√±a (detectar cambios en otras pesta√±as)
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        console.log('üëÅÔ∏è [NewsAdd] Tab visible, verificando admin status');
        checkAdminStatus();
      }
    });

    // Escuchar cambios en localStorage (para sincronizar entre pesta√±as)
    window.addEventListener('storage', (e) => {
      if (e.key === 'adminToken') {
        console.log('üîÑ [NewsAdd] Token cambiado en localStorage:', e.newValue ? 'Token a√±adido' : 'Token eliminado');
        if (e.newValue) {
          checkAdminStatus();
        } else {
          currentAdminStatus = false;
          updateAdminElements(false);
        }
      }
    });

    // ============= FUNCIONES AUXILIARES =============
    
    // Funci√≥n para generar ID de 4 d√≠gitos aleatorios
    function generateNewsId() {
      const randomId = Math.floor(1000 + Math.random() * 9000).toString(); // Genera n√∫mero entre 1000-9999
      const newsIdInput = document.getElementById('newsId');
      
      if (newsIdInput) {
        newsIdInput.value = randomId;
        console.log('üî¢ [NewsAdd] ID generado:', randomId);
      }
      
      return randomId;
    }

    // ============= FUNCIONES DE MODAL =============
    const wrapper = document.getElementById("news-add-wrapper");
    const btnAdd = document.getElementById("btn-add-news");
    const modal = document.getElementById("modal-add-news");
    const btnClose = document.getElementById("btn-close-modal");
    const btnCancel = document.getElementById("btn-cancel");
    const form = document.getElementById("form-add-news");

    if (!btnAdd || !modal || !form) return;

    async function showModal() {
      console.log('‚ûï [NewsAdd] Intentando mostrar modal');
      
      if (!currentAdminStatus) {
        alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
        return;
      }

      try {
        const token = localStorage.getItem('adminToken');
        if (!token) {
          throw new Error('No hay token');
        }

        console.log('üîê [NewsAdd] Verificando token antes de abrir modal...');
        const response = await fetch('http://localhost:8080/api/auth/verify', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!response.ok) {
          throw new Error('Token inv√°lido');
        }

        const data = await response.json();
        if (!data.authenticated || !data.isAdmin) {
          throw new Error('Sin permisos de admin');
        }

        console.log('‚úÖ [NewsAdd] Permisos verificados, abriendo modal');
        
        // Generar nuevo ID de 4 d√≠gitos aleatorios antes de mostrar el modal
        generateNewsId();
        
        modal.classList.remove("hidden");
        document.body.style.overflow = "hidden";

      } catch (error) {
        console.error('‚ùå [NewsAdd] Error verificando permisos:', error);
        alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
        
        localStorage.removeItem('adminToken');
        currentAdminStatus = false;
        updateAdminElements(false);
      }
    }

    function hideModal() {
      modal.classList.add("hidden");
      document.body.style.overflow = "";
      form.reset();
    }

    // Event listeners para el modal
    btnAdd.onclick = (e) => {
      e.preventDefault();
      showModal();
    };
    
    if (btnClose) btnClose.onclick = hideModal;
    if (btnCancel) btnCancel.onclick = hideModal;
    
    modal.onclick = (e) => {
      if (e.target === modal) hideModal();
    };

    // ============= ENV√çO DEL FORMULARIO =============
    form.onsubmit = async (e) => {
      e.preventDefault();

      if (!currentAdminStatus) {
        alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
        return;
      }

      const formData = new FormData(form);
      if (!formData.get("title") || !formData.get("description")) {
        alert("Complete los campos obligatorios (T√≠tulo y Descripci√≥n)");
        return;
      }

      const newsData = {
        id: formData.get("id"), // Incluir el ID generado
        title: formData.get("title").trim(),
        description: formData.get("description").trim(),
        publicationDate: formData.get("publicationDate") || null,
        link: formData.get("link") ? formData.get("link").trim() : null,
      };

      try {
        const token = localStorage.getItem('adminToken');
        if (!token) {
          throw new Error('No hay token');
        }

        console.log('üîê [NewsAdd] Verificando token antes de crear...');
        const verifyResponse = await fetch('http://localhost:8080/api/auth/verify', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!verifyResponse.ok) {
          throw new Error('Token inv√°lido');
        }

        const verifyData = await verifyResponse.json();
        if (!verifyData.authenticated || !verifyData.isAdmin) {
          throw new Error('Sin permisos de admin');
        }

        console.log('‚úÖ [NewsAdd] Permisos verificados, creando noticia');
        console.log('üì§ [NewsAdd] Datos a enviar:', newsData);

        const response = await fetch("http://localhost:8080/api/news/create", {
          method: "POST",
          headers: getAuthHeaders(),
          body: JSON.stringify(newsData),
        });

        console.log('üì• [NewsAdd] Respuesta del servidor:', response.status);

        if (response.ok) {
          hideModal();
          addNotification('success', 'Noticia creada exitosamente.');
          window.location.reload();
        } else if (handleAuthError(response)) {
          return;
        } else {
          const errorText = await response.text();
          console.error('‚ùå [NewsAdd] Error del servidor:', errorText);
          addNotification('error', "Error al crear la noticia: " + errorText);
        }
      } catch (error) {
        console.error('‚ùå [NewsAdd] Error:', error);
        
        if (error.message.includes('Token') || error.message.includes('permisos')) {
          alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
          localStorage.removeItem('adminToken');
          currentAdminStatus = false;
          updateAdminElements(false);
        } else {
          addNotification('error', "Error de conexi√≥n: " + error.message);
        }
      }
    };

    // Cerrar con Escape
    document.onkeydown = (e) => {
      if (e.key === "Escape" && !modal.classList.contains("hidden"))
        hideModal();
    };

    // Funci√≥n para notificaciones
    function addNotification(type, message) {
      console.log("üîç addNotification llamado:", { type, message });
      try {
        const notifications = JSON.parse(
          localStorage.getItem("pendingNotifications") || "[]",
        );

        const notification = {
          id: `stored-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
          message,
          type,
          duration: 4000,
          timestamp: Date.now(),
        };

        notifications.push(notification);
        localStorage.setItem(
          "pendingNotifications",
          JSON.stringify(notifications),
        );

        console.log(
          "üíæ Notificaci√≥n guardada en localStorage para mostrar despu√©s de recargar:",
          notification,
        );

        return notification.id;
      } catch (error) {
        console.error("‚ùå Error guardando notificaci√≥n:", error);
      }
    }
  });
</script>