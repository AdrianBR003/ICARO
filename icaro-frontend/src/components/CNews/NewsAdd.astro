---
interface Props {
  isAdmin: boolean;
}

const { isAdmin } = Astro.props;
---

<div id="add-news-container" class="mb-6 flex justify-center">
  <button
    id="addNewsButton"
    class:list={[
      isAdmin ? "block" : "hidden",
      "bg-[#006D38] hover:bg-[#005229] text-white font-bold py-2 px-4 rounded flex items-center edit-btn transition-colors",
    ]}
    onclick="showAddNewsModal()"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
    </svg>
    Añadir Noticia
  </button>

  <div
    id="add-news-modal"
    class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 fade-in"
  >
    <div
      class="modal-overlay absolute inset-0 bg-black/50"
      onclick="hideAddNewsModal()"
    ></div>

    <div
      class="relative bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">   
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-bold">Añadir Nueva Noticia</h3>
          <button
            type="button"
            onclick="hideAddNewsModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="add-news-form" class="space-y-4">
          <div>
            <label class="block mb-1 text-sm font-medium">Título *</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              maxlength="200"
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Descripción *</label>
            <textarea
              id="description"
              name="description"
              rows="3"
              required
              maxlength="1000"
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
            ></textarea>
            <div class="text-xs text-gray-500 mt-1">
              <span id="description-counter">0</span>/1000 caracteres
            </div>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Participantes</label>
            <textarea
              id="participants"
              name="participants"
              rows="2"
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              placeholder="Participante1, Participante2, Participante3"
            ></textarea>
            <div class="text-xs text-gray-500 mt-1">Separa los participantes con comas</div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block mb-1 text-sm font-medium">Fecha de Inicio</label>
              <input
                type="date"
                id="FirstprojectDate"
                name="FirstprojectDate"
                class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              />
            </div>

            <div>
              <label class="block mb-1 text-sm font-medium">Fecha de Finalización</label>
              <input
                type="date"
                id="SecondprojectDate"
                name="SecondprojectDate"
                class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              />
            </div>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Etiquetas</label>
            <div class="flex flex-wrap py-2 px-3 border rounded-md" id="tagsContainer"></div>
            <div class="flex mt-2">
              <input
                type="text"
                id="tagInput"
                class="flex-grow px-3 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
                placeholder="Nueva etiqueta"
                maxlength="50"
              />
              <button
                type="button"
                onclick="addTag()"
                class="px-3 bg-[#006D38] text-white rounded-r-md hover:bg-[#005229] transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            </div>
            <p class="text-xs text-gray-500 mt-1">Presione Enter o el botón '+' para añadir etiquetas</p>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">IDs de Trabajos Relacionados</label>
            <div class="flex flex-wrap py-2 px-3 border rounded-md" id="workIdsContainer"></div>
            <div class="flex mt-2">
              <input
                type="text"
                id="workIdInput"
                class="flex-grow px-3 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
                placeholder="ID del trabajo"
                maxlength="50"
              />
              <button
                type="button"
                onclick="addWorkId()"
                class="px-3 bg-[#006D38] text-white rounded-r-md hover:bg-[#005229] transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            </div>
            <p class="text-xs text-gray-500 mt-1">Presione Enter o el botón '+' para añadir IDs de trabajos</p>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Enlace (opcional)</label>
            <input
              type="url"
              id="link"
              name="link"
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              placeholder="https://ejemplo.com"
            />
          </div>

          <div class="flex gap-4 pt-4 border-t">
            <button
              type="button"
              onclick="hideAddNewsModal()"
              class="px-4 py-2 border rounded-md hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229] transition-colors"
            >
              Crear Noticia
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script is:inline>
let tagsList = [];
let workIdsList = [];

function showAddNewsModal() {
  document.getElementById('add-news-modal').classList.remove('hidden');
  document.body.style.overflow = 'hidden'; 
}

function hideAddNewsModal() {
  document.getElementById('add-news-modal').classList.add('hidden');
  document.body.style.overflow = '';
  
  // Limpiar formulario
  document.getElementById('add-news-form').reset();
  tagsList = [];
  workIdsList = [];
  renderTags();
  renderWorkIds();
  
  const counter = document.getElementById('description-counter');
  if (counter) counter.textContent = '0';
}

function addTag() {
  const tagInput = document.getElementById('tagInput');
  const tag = tagInput.value.trim();
  
  if (tag && !tagsList.includes(tag) && tagsList.length < 10) {
    tagsList.push(tag);
    renderTags();
    tagInput.value = '';
  }
}

function removeTag(tag) {
  tagsList = tagsList.filter(t => t !== tag);
  renderTags();
}

function renderTags() {
  const container = document.getElementById('tagsContainer');
  container.innerHTML = '';
  
  if (tagsList.length === 0) {
    container.innerHTML = '<span class="text-gray-400 text-sm">No hay etiquetas añadidas</span>';
    return;
  }
  
  tagsList.forEach(tag => {
    const tagElement = document.createElement('div');
    tagElement.className = 'inline-flex items-center bg-[#006D38] text-white rounded-full px-3 py-1 text-sm mr-2 mb-2';
    tagElement.innerHTML = `
      ${tag}
      <button type="button" onclick="removeTag('${tag}')" class="ml-1 text-white/80 hover:text-white">
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(tagElement);
  });
}

function addWorkId() {
  const workIdInput = document.getElementById('workIdInput');
  const workId = workIdInput.value.trim();
  
  if (workId && !workIdsList.includes(workId) && workIdsList.length < 10) {
    workIdsList.push(workId);
    renderWorkIds();
    workIdInput.value = '';
  }
}

function removeWorkId(workId) {
  workIdsList = workIdsList.filter(w => w !== workId);
  renderWorkIds();
}

function renderWorkIds() {
  const container = document.getElementById('workIdsContainer');
  container.innerHTML = '';
  
  if (workIdsList.length === 0) {
    container.innerHTML = '<span class="text-gray-400 text-sm">No hay IDs de trabajo añadidos</span>';
    return;
  }
  
  workIdsList.forEach(workId => {
    const workIdElement = document.createElement('div');
    workIdElement.className = 'inline-flex items-center bg-blue-500 text-white rounded-full px-3 py-1 text-sm mr-2 mb-2';
    workIdElement.innerHTML = `
      ${workId}
      <button type="button" onclick="removeWorkId('${workId}')" class="ml-1 text-white/80 hover:text-white">
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(workIdElement);
  });
}

document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('add-news-form');
  const tagInput = document.getElementById('tagInput');
  const workIdInput = document.getElementById('workIdInput');
  const descriptionTextarea = document.getElementById('description');
  const descriptionCounter = document.getElementById('description-counter');
  
  // Contador de caracteres
  if (descriptionTextarea && descriptionCounter) {
    descriptionTextarea.addEventListener('input', function() {
      const length = this.value.length;
      descriptionCounter.textContent = length;
      
      if (length > 900) {
        descriptionCounter.classList.add('text-red-500');
      } else {
        descriptionCounter.classList.remove('text-red-500');
      }
    });
  }
  
  // Validación de fechas
  const startDate = document.getElementById('FirstprojectDate');
  const endDate = document.getElementById('SecondprojectDate');
  
  if (startDate && endDate) {
    function validateDates() {
      if (startDate.value && endDate.value) {
        if (new Date(startDate.value) > new Date(endDate.value)) {
          endDate.setCustomValidity('La fecha de finalización debe ser posterior a la fecha de inicio');
        } else {
          endDate.setCustomValidity('');
        }
      }
    }
    
    startDate.addEventListener('change', validateDates);
    endDate.addEventListener('change', validateDates);
  }
  
  // Enter para añadir tags y work IDs
  tagInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  });
  
  workIdInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      addWorkId();
    }
  });
  
  // Envío del formulario
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const title = document.getElementById('title').value.trim();
      const description = document.getElementById('description').value.trim();
      
      if (!title || !description) {
        alert('Por favor, completa los campos obligatorios (título y descripción)');
        return;
      }

      if (title.length > 200) {
        alert('El título no puede exceder 200 caracteres');
        return;
      }

      if (description.length > 1000) {
        alert('La descripción no puede exceder 1000 caracteres');
        return;
      }
      
      const participantsInput = document.getElementById('participants').value.trim();
      const participantsArray = participantsInput ? 
        participantsInput.split(',').map(participant => participant.trim()).filter(Boolean) : [];
      
      const newsData = {
        title: title,
        description: description,
        participants: participantsArray,
        FirstprojectDate: document.getElementById('FirstprojectDate').value || null,
        SecondprojectDate: document.getElementById('SecondprojectDate').value || null,
        tags: tagsList,
        workIds: workIdsList,
        link: document.getElementById('link').value.trim() || null
      };
      
      try {
        console.log('Datos de la noticia a enviar:', newsData);
        
        const response = await fetch('http://localhost:8080/api/news/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(newsData)
        });
        
        if (response.ok) {
          alert('¡Noticia creada exitosamente!');
          hideAddNewsModal();
          window.location.reload();
        } else {
          let errorMessage = 'Error desconocido';
          try {
            const errorData = await response.json();
            errorMessage = errorData.message || JSON.stringify(errorData);
          } catch {
            errorMessage = await response.text();
          }
          
          console.error('Error del backend:', errorMessage);
          alert('Error al crear la noticia: ' + errorMessage);
        }
      } catch (error) {
        console.error('Error de conexión:', error);
        alert('Error de conexión al crear la noticia: ' + error.message);
      }
    });
  }
  
  // Cerrar modal con ESC
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      hideAddNewsModal();
    }
  });
});
</script>