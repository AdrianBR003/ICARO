---
export interface Props {
  news: {
    id: string;
    title: string;
    [key: string]: any;
  };
  isAdmin?: boolean;
}

const { news, isAdmin = false } = Astro.props;
const deleteModalId = `delete-modal-${news.id}`;
---

<!-- Modal de confirmación para eliminar -->
{isAdmin && (
  <div
    id={deleteModalId}
    class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
  >
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
      <div class="text-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-red-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
        <h3 class="text-xl font-bold text-gray-900 mb-2">¿Eliminar noticia?</h3>
        <p class="text-gray-600 mb-6">Esta acción no se puede deshacer. La noticia "{news.title}" se eliminará permanentemente.</p>
        <div class="flex justify-center gap-3">
          <button 
            type="button"
            class="cancel-delete px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancelar
          </button>
          <button 
            type="button"
            class="confirm-delete px-6 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 transition-colors"
          >
            Eliminar
          </button>
        </div>
      </div>
    </div>
  </div>
)}

<script is:inline define:vars={{ deleteModalId, news, isAdmin }}>
  function initializeNewsDeleteComponent() {
    const modal = document.getElementById(deleteModalId);
    
    if (!modal) {
      return;
    }

    const cancelBtn = modal.querySelector('.cancel-delete');
    const confirmBtn = modal.querySelector('.confirm-delete');

    function closeModal() {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }

    // Event listeners
    if (cancelBtn) {
      cancelBtn.addEventListener('click', closeModal);
    }

    // Cerrar modal al hacer click fuera
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Cerrar con ESC
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });

    // Confirmar eliminación
    if (confirmBtn) {
      confirmBtn.addEventListener('click', async function() {
        try {
          const response = await fetch(`http://localhost:8080/api/news/delete/${news.id}`, {
            method: 'DELETE',
            credentials: 'include',
          });

          if (response.ok) {
            alert('La noticia se eliminó correctamente.');
            closeModal();
            window.location.reload();
          } else {
            let errorMessage = 'Error desconocido';
            try {
              const errorData = await response.json();
              errorMessage = errorData.message || JSON.stringify(errorData);
            } catch {
              try {
                errorMessage = await response.text();
              } catch {
                errorMessage = `Error ${response.status}: ${response.statusText}`;
              }
            }
            
            console.error('Error del backend:', errorMessage);
            alert('Error al eliminar la noticia: ' + errorMessage);
          }
        } catch (error) {
          console.error('Error de conexión:', error);
          alert('Error de conexión al eliminar la noticia: ' + error.message);
        }
      });
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeNewsDeleteComponent);
  } else {
    setTimeout(initializeNewsDeleteComponent, 50);
  }
</script>

<style>
  .modal {
    transition: opacity 0.3s ease;
  }
  .modal.hidden {
    opacity: 0;
    pointer-events: none;
  }
  .modal:not(.hidden) {
    opacity: 1;
    pointer-events: all;
  }
</style>