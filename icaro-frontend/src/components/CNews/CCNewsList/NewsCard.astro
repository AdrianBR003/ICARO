---
interface Props {
  news: {
    id: string;
    title: string;
    description: string;
    participants: string[];
    FirstprojectDate: string;
    SecondprojectDate: string;
    tags: string[];
    workIds?: string[];
    image?: string;
    link?: string;
    [key: string]: any;
  };
  isAdmin: boolean;
}

const { news, isAdmin = false } = Astro.props;
const cardId = `news-card-${news.id}`;

// Usar FirstprojectDate como projectDate para el modal
const projectDate = news.FirstprojectDate || '';
---

<div id={cardId} class="news-card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow relative flex">
  <!-- Botones de admin - Siempre en el DOM pero ocultos por defecto -->
  <div id={`admin-buttons-${news.id}`} class="absolute top-3 right-3 flex flex-col gap-2 admin-buttons hidden">
    <button
      class="edit-btn z-10 p-2 rounded-full bg-white/90 hover:bg-gray-100 transition-colors shadow-sm"
      onclick="window.editNews(event)"
      data-news-id={news.id}
      data-news-title={news.title}
      data-news-description={news.description}
      data-news-link={news.link || ''}
      data-news-projectdate={projectDate}
      aria-label="Editar noticia"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
      </svg>
    </button>

    <button
      class="delete-btn z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm"
      onclick="window.deleteNews('${news.id}')"
      aria-label="Eliminar noticia"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>

  {news.image && (
    <div class="flex-shrink-0 flex items-center justify-center w-48 bg-gray-200 overflow-hidden">
      <img src={news.image} alt={news.title} class="w-full h-full object-cover" loading="lazy" />
    </div>
  )}

  <div class="p-6 flex-1">
    <h3 class="text-xl font-bold mb-2 text-gray-900">{news.title}</h3>
    <p class="text-gray-600 mb-4 line-clamp-3">{news.description}</p>

    {news.participants?.length > 0 && (
      <p class="text-sm text-gray-500 mb-3">
        <span class="font-medium">Participantes:</span> {news.participants.join(", ")}
      </p>
    )}

    <div class="flex gap-4 text-sm text-gray-500 mb-3">
      {news.FirstprojectDate && <div><span class="font-medium">PublicaciÃ³n:</span> {news.FirstprojectDate}</div>}
      {news.SecondprojectDate && <div><span class="font-medium">ActualizaciÃ³n:</span> {news.SecondprojectDate}</div>}
    </div>

    {news.tags?.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-4">
        {news.tags.map((tag, index) => (
          <span key={index} class="tag inline-block px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">{tag}</span>
        ))}
      </div>
    )}

    {news.link && (
      <a href={news.link} class="inline-flex items-center text-[#006D38] hover:text-[#005229] font-medium text-sm transition-colors" target="_blank" rel="noopener noreferrer">
        Ver mÃ¡s
      </a>
    )}
  </div>
</div>

<style is:global>
.line-clamp-3 { 
  display: -webkit-box; 
  -webkit-line-clamp: 3; 
  -webkit-box-orient: vertical; 
  overflow: hidden; 
}
</style>

<script is:inline define:vars={{ isAdmin }}>
// Estado inicial basado en la prop del servidor
document.addEventListener('DOMContentLoaded', () => {
  const adminButtons = document.getElementById('admin-buttons-{news.id}');
  if (adminButtons) {
    adminButtons.classList.toggle('hidden', !{isAdmin});
    console.log('ðŸ”” [NewsCard {news.id}] Estado inicial isAdmin:', {isAdmin});
  }

  // Escuchar cambios en el estado admin
  window.addEventListener('adminStatusChanged', (event) => {
    const { isAdmin: newAdminStatus } = event.detail;
    const adminButtons = document.getElementById('admin-buttons-{news.id}');
    if (adminButtons) {
      adminButtons.classList.toggle('hidden', !newAdminStatus);
      console.log('ðŸ”” [NewsCard {news.id}] adminStatusChanged. Nuevo estado:', newAdminStatus);
    }
  });
});
</script>