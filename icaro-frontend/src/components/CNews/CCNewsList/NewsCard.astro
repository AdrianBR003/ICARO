---
interface Props {
  news: {
    id: string;
    title: string;
    description: string;
    publicationDate?: string;
    link?: string;
    [key: string]: any;
  };
  isAdmin: boolean;
}

const { news, isAdmin = false } = Astro.props;
const cardId = `${news.id}`;

// Solo trabajamos con la fecha de publicación
const publicationDate = news.publicationDate || '';

// Debug: log para ver qué datos llegan
console.log('🔍 [NewsCard] Datos recibidos:', {
  id: news.id,
  publicationDate,
  fullNews: news
});
---

<div id={cardId} class="news-card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow relative flex">
  <!-- Botones de admin -->
  <div id={`admin-buttons-${news.id}`} class="absolute top-3 right-3 flex flex-col gap-2 admin-buttons hidden z-20">
    <button
      class="edit-btn z-10 p-2 rounded-full bg-white/90 hover:bg-gray-100 transition-colors shadow-sm"
      onclick="window.editNews(event)"
      data-news-id={news.id}
      data-news-title={news.title}
      data-news-description={news.description}
      data-news-link={news.link || ''}
      data-news-publicationdate={publicationDate}
      aria-label="Editar noticia"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
      </svg>
    </button>

    <button
      class="delete-btn z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm"
      onclick={`window.deleteNews('${news.id}')`}
      aria-label="Eliminar noticia"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>

  {news.image && (
    <div class="flex-shrink-0 flex items-center justify-center w-48 max-w-xs bg-gray-100 overflow-hidden">
      <img 
        src={news.image} 
        alt={news.title} 
        class="w-full h-48 object-contain mx-auto" 
        loading="lazy" 
        style="max-height: 12rem;"
      />
    </div>
  )}

  <div class="p-6 flex-1 min-w-0">
    <h3 class="text-xl font-bold mb-2 text-gray-900">{news.title}</h3>

    <!-- Campo de Fecha de Publicación -->
    {publicationDate && (
      <div class="mb-3 flex items-center text-sm text-gray-700">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-[#006D38]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        <span class="font-medium text-gray-800">Fecha de publicación:</span>
        <span class="ml-1 text-gray-600">{publicationDate}</span>
      </div>
    )}

    <!-- Mostrar siempre el campo con placeholder si no hay fecha -->
    {!publicationDate && (
      <div class="mb-3 flex items-center text-sm text-gray-500">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        <span class="font-medium">Fecha de publicación:</span>
        <span class="ml-1 italic">Sin fecha</span>
      </div>
    )}

    <!-- Descripción completa -->
    <div class="mb-4">
      <p class="text-gray-600 whitespace-pre-wrap break-words leading-relaxed">
        {news.description}
      </p>
    </div>

    {news.link && (
      <a href={news.link} class="inline-flex items-center text-[#006D38] hover:text-[#005229] font-medium text-sm transition-colors" target="_blank" rel="noopener noreferrer">
        Ver más
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
        </svg>
      </a>
    )}
  </div>
</div>

<script is:inline define:vars={{ isAdmin }}>
// Estado inicial basado en la prop del servidor
document.addEventListener('DOMContentLoaded', () => {
  const adminButtons = document.getElementById('admin-buttons-${news.id}');
  if (adminButtons) {
    adminButtons.classList.toggle('hidden', !${isAdmin});
    console.log('🔔 [NewsCard ${news.id}] Estado inicial isAdmin:', ${isAdmin});
  }

  // Escuchar cambios en el estado admin
  window.addEventListener('adminStatusChanged', (event) => {
    const { isAdmin: newAdminStatus } = event.detail;
    const adminButtons = document.getElementById('admin-buttons-${news.id}');
    if (adminButtons) {
      adminButtons.classList.toggle('hidden', !newAdminStatus);
      console.log('🔔 [NewsCard ${news.id}] adminStatusChanged. Nuevo estado:', newAdminStatus);
    }
  });
});
</script>

<style is:global>
.news-card {
  min-height: fit-content;
}

/* Mejorar la legibilidad del texto largo */
.text-gray-600 {
  line-height: 1.6;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

/* Asegurar que el contenido no se desborde */
.min-w-0 {
  min-width: 0;
}

/* Estilos específicos para la imagen */
.w-48 {
  width: 12rem;
}

.max-w-xs {
  max-width: 20rem;
}

.object-contain {
  object-fit: contain;
}
</style>