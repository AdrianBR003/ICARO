---
import NewsCard from "@/components/CNews/CCNewsList/NewsCard.astro";
import NewsAdd from "@/components/CNews/NewsAdd.astro";

interface News {
  id: string;
  title: string;
  description: string;
  publicationDate?: string;
  link?: string;
}

interface Props {
  news: News[];
  isAdmin?: boolean;
}

const { news, isAdmin = false } = Astro.props;
---

<div id="news-list-container">
  <NewsAdd isAdmin={isAdmin} />

  <div class="mb-6">
    <div class="relative max-w-md mx-auto">
      <input
        type="text"
        id="search-input"
        placeholder="Buscar noticias..."
        class="w-full px-4 py-2 pl-10 pr-4 text-gray-700 bg-white border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent transition-all"
      />
      <div class="absolute inset-y-0 left-0 flex items-center pl-3">
        <svg
          class="w-5 h-5 text-gray-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>
  </div>

  <div class="space-y-6" id="news-list">
    {
      news.map((newsItem, index) => {
        const validatedNews = {
          ...newsItem,
          id: newsItem.id || `news-${index}`,
          title: newsItem.title || "Sin t√≠tulo",
          description: newsItem.description || "Sin descripci√≥n",
        };
        return <NewsCard news={validatedNews} isAdmin={isAdmin} />;
      })
    }
  </div>

  <!-- Modal global de edici√≥n -->
  <div
    id="editModal"
    class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4"
  >
    <div
      class="modal-overlay absolute inset-0 bg-black/50"
      onclick="window.hideModal('editModal')"
    >
    </div>

    <div
      class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto p-6"
    >
      <h3 id="modalTitle" class="text-xl font-bold mb-4">Editar Noticia</h3>

      <form id="editForm" class="space-y-4">
        <input type="hidden" id="editId" />

        <!-- Campo ID visible pero no editable -->
        <div>
          <label class="block mb-1 text-sm font-medium">ID de la noticia</label>
          <input
            type="text"
            id="editIdDisplay"
            readonly
            class="w-full px-3 py-2 border rounded-md bg-gray-50 text-gray-500 cursor-not-allowed"
            placeholder="Se generar√° autom√°ticamente al guardar"
          />
          <p class="text-xs text-gray-400 mt-1">
            Este ID es de solo lectura y se genera autom√°ticamente
          </p>
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">T√≠tulo *</label>
          <input
            type="text"
            id="editTitle"
            required
            class="w-full px-3 py-2 border rounded-md"
          />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Descripci√≥n *</label>
          <textarea
            id="editDescription"
            required
            class="w-full px-3 py-2 border rounded-md h-40"></textarea>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block mb-1 text-sm font-medium">Enlace (URL)</label>
            <input
              type="url"
              id="editLink"
              class="w-full px-3 py-2 border rounded-md"
              placeholder="https://ejemplo.com"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium"
              >Fecha de Publicaci√≥n</label
            >
            <input
              type="date"
              id="editPublicationDate"
              class="w-full px-3 py-2 border rounded-md"
            />
            <p class="text-xs text-gray-400 mt-1">
              Fecha en que se publica la noticia
            </p>
          </div>
        </div>

        <div class="flex gap-4 pt-4">
          <button
            type="button"
            onclick="window.hideModal('editModal')"
            class="px-4 py-2 border rounded-md hover:bg-gray-50"
            >Cancelar</button
          >
          <button
            type="submit"
            class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]"
            >Guardar</button
          >
        </div>
      </form>
    </div>
  </div>

  <style is:global>
    .modal {
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }
    .modal:not(.hidden) {
      opacity: 1;
      pointer-events: auto;
    }
    .modal-content {
      transform: translateY(-20px);
      transition: transform 0.3s ease;
    }
    .modal:not(.hidden) .modal-content {
      transform: translateY(0);
    }
  </style>

  <script is:inline define:vars={{ isAdmin }}>
    // Configuraci√≥n de la API
    const API_BASE_URL = "http://localhost:8080/api/news";
    const ASSETS_BASE_URL = "http://localhost:8080/assets/news";

    // Cache para evitar m√∫ltiples peticiones de la misma imagen
    const imageCache = new Map();
    
    // Funci√≥n mejorada para cargar im√°genes de noticias
    window.loadNewsImages = function() {
      const images = document.querySelectorAll("img[data-news-image]");
      
      images.forEach((img) => {
        const newsId = img.getAttribute("data-news-image");
        if (!newsId) return;
        
        // Si ya tiene una imagen cargada que no es default, no hacer nada
        if (img.dataset.imageLoaded === "true") return;
        
        // Si ya est√° en cach√©, usar la URL cacheada
        if (imageCache.has(newsId)) {
          const cachedUrl = imageCache.get(newsId);
          if (cachedUrl) {
            img.src = cachedUrl;
            img.dataset.imageLoaded = "true";
          }
          return;
        }
        
        // Intentar cargar la imagen con diferentes extensiones
        loadNewsImage(newsId, img);
      });
    };

    // Funci√≥n espec√≠fica para cargar una imagen
    function loadNewsImage(newsId, imgElement) {
      const extensions = ["webp", "jpg", "jpeg", "png"];
      let currentIndex = 0;
      
      function tryNextExtension() {
        if (currentIndex >= extensions.length) {
          // No se encontr√≥ imagen, mantener la default
          imageCache.set(newsId, null);
          return;
        }
        
        const ext = extensions[currentIndex];
        const imageUrl = `${ASSETS_BASE_URL}/${newsId}.${ext}`;
        
        // Crear una imagen temporal para probar la URL
        const testImg = new Image();
        
        testImg.onload = function() {
          // Imagen encontrada exitosamente
          imgElement.src = imageUrl;
          imgElement.dataset.imageLoaded = "true";
          imageCache.set(newsId, imageUrl);
          console.log(`‚úÖ Imagen cargada: ${newsId}.${ext}`);
        };
        
        testImg.onerror = function() {
          // Esta extensi√≥n no funcion√≥, intentar con la siguiente
          currentIndex++;
          tryNextExtension();
        };
        
        // Iniciar la carga
        testImg.src = imageUrl;
      }
      
      tryNextExtension();
    }

    // Funci√≥n para b√∫squeda de noticias
    function setupSearch() {
      const searchInput = document.getElementById('search-input');
      const newsList = document.getElementById('news-list');
      
      if (!searchInput || !newsList) return;
      
      const newsCards = Array.from(newsList.children);
      
      searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase().trim();
        
        newsCards.forEach(card => {
          const title = card.querySelector('h3')?.textContent.toLowerCase() || '';
          const description = card.querySelector('.text-gray-600')?.textContent.toLowerCase() || '';
          
          const matches = title.includes(searchTerm) || description.includes(searchTerm);
          card.style.display = matches ? '' : 'none';
        });
      });
    }

    // Funciones globales para NewsCard
    window.editNews = function(event) {
      event.preventDefault();
      event.stopPropagation();

      const button = event.currentTarget;
      const newsItem = {
        id: button.getAttribute("data-news-id"),
        title: button.getAttribute("data-news-title"),
        description: button.getAttribute("data-news-description"),
        link: button.getAttribute("data-news-link") || "",
        publicationDate: button.getAttribute("data-news-publicationdate") || "",
      };

      console.log("üîî [NewsList] editNews llamado para:", newsItem);
      document.dispatchEvent(new CustomEvent("editNews", { detail: newsItem }));
    };

    window.deleteNews = async function(newsId) {
      if (!confirm("¬øEst√°s seguro de que quieres eliminar esta noticia?")) {
        return;
      }

      try {
        console.log("üóëÔ∏è [NewsList] Eliminando noticia:", newsId);

        const response = await fetch(`${API_BASE_URL}/delete/${newsId}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          console.log("‚úÖ Noticia eliminada exitosamente");

          // Eliminar el elemento del DOM
          const newsElement = document.querySelector(`#news-${newsId}, [id="${newsId}"]`);
          if (newsElement) {
            newsElement.style.opacity = "0";
            newsElement.style.transform = "translateX(-100%)";
            setTimeout(() => newsElement.remove(), 300);
          }

          // Limpiar cach√© de imagen
          imageCache.delete(newsId);

          showNotification("Noticia eliminada exitosamente", "success");

          document.dispatchEvent(
            new CustomEvent("newsDeleted", { detail: { id: newsId } })
          );
        } else if (response.status === 409) {
          const errorData = await response.text();
          console.error("‚ùå Error al eliminar noticia:", errorData);
          showNotification("La noticia no existe o ya fue eliminada", "error");
        } else {
          console.error("‚ùå Error inesperado:", response.status);
          showNotification("Error al eliminar la noticia", "error");
        }
      } catch (error) {
        console.error("‚ùå Error de conexi√≥n:", error);
        showNotification("Error de conexi√≥n al eliminar la noticia", "error");
      }
    };

    // Funci√≥n para mostrar notificaciones
    function showNotification(message, type = "info") {
      // Eliminar notificaciones anteriores
      const existingNotifications = document.querySelectorAll('.notification-toast');
      existingNotifications.forEach(n => n.remove());
      
      const notification = document.createElement("div");
      notification.className = `notification-toast fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white font-medium transition-all duration-300 transform ${
        type === "success"
          ? "bg-green-500"
          : type === "error"
            ? "bg-red-500"
            : "bg-blue-500"
      }`;
      notification.textContent = message;

      document.body.appendChild(notification);

      // Animaci√≥n de entrada
      requestAnimationFrame(() => {
        notification.style.transform = "translateX(0)";
      });

      setTimeout(() => {
        notification.style.opacity = "0";
        notification.style.transform = "translateX(100%)";
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }

    window.showModal = function(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove("hidden");
        document.body.style.overflow = "hidden";
      }
    };

    window.hideModal = function(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add("hidden");
        document.body.style.overflow = "auto";
      }
    };

    window.generateNewsId = function() {
      const timestamp = Date.now();
      const random = Math.floor(Math.random() * 1000);
      return `news-${timestamp}-${random}`;
    };

    // Funci√≥n para guardar/actualizar noticia
    async function saveNews(newsData) {
      try {
        const isEdit = !!newsData.id && !newsData.id.includes('news-');
        const url = isEdit ? `${API_BASE_URL}/update` : `${API_BASE_URL}/create`;
        
        console.log(`üíæ [NewsList] ${isEdit ? "Actualizando" : "Creando"} noticia:`, newsData);

        const response = await fetch(url, {
          method: isEdit ? "PUT" : "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            id: newsData.id,
            title: newsData.title,
            description: newsData.description,
            link: newsData.link || "",
            publicationDate: newsData.publicationDate || null,
          }),
        });

        if (response.ok) {
          const savedNews = await response.json();
          console.log("‚úÖ Noticia guardada exitosamente:", savedNews);

          showNotification(
            isEdit ? "Noticia actualizada exitosamente" : "Noticia creada exitosamente",
            "success"
          );

          document.dispatchEvent(
            new CustomEvent("newsSaved", {
              detail: {
                news: savedNews,
                isEdit: isEdit,
              },
            })
          );

          return true;
        } else if (response.status === 409) {
          const errorData = await response.text();
          console.error("‚ùå Conflicto al guardar noticia:", errorData);
          showNotification("La noticia ya existe", "error");
          return false;
        } else {
          console.error("‚ùå Error inesperado:", response.status);
          showNotification("Error al guardar la noticia", "error");
          return false;
        }
      } catch (error) {
        console.error("‚ùå Error de conexi√≥n:", error);
        showNotification("Error de conexi√≥n al guardar la noticia", "error");
        return false;
      }
    }

    // Inicializaci√≥n cuando el DOM est√° listo
    document.addEventListener("DOMContentLoaded", () => {
      console.log("üîî [NewsList] Componente cargado. isAdmin inicial:", isAdmin);

      // Cargar im√°genes de noticias al inicio
      window.loadNewsImages();
      
      // Configurar b√∫squeda
      setupSearch();

      // Escuchar cambios en el estado admin
      window.addEventListener("adminStatusChanged", (event) => {
        const { isAdmin: newAdminStatus, source } = event.detail;
        console.log("üîî [NewsList] adminStatusChanged:", newAdminStatus, "Fuente:", source);

        const adminButtons = document.querySelectorAll('[id^="admin-buttons-"]');
        adminButtons.forEach((button) => {
          button.classList.toggle("hidden", !newAdminStatus);
        });
      });

      // Escuchar el evento de edici√≥n
      document.addEventListener("editNews", (event) => {
        const newsItem = event.detail;
        console.log("üîî [NewsList] Evento editNews recibido:", newsItem);

        document.getElementById("editId").value = newsItem.id;
        
        const displayId = newsItem.id || window.generateNewsId();
        document.getElementById("editIdDisplay").value = displayId;

        document.getElementById("editTitle").value = newsItem.title;
        document.getElementById("editDescription").value = newsItem.description;
        document.getElementById("editLink").value = newsItem.link;
        document.getElementById("editPublicationDate").value = newsItem.publicationDate;

        document.getElementById("modalTitle").textContent = newsItem.id
          ? `Editar "${newsItem.title}"`
          : "Crear Nueva Noticia";

        window.showModal("editModal");
      });

      // Manejar el env√≠o del formulario
      document.getElementById("editForm")?.addEventListener("submit", async (e) => {
        e.preventDefault();

        const id = document.getElementById("editId").value || window.generateNewsId();
        const title = document.getElementById("editTitle").value;
        const description = document.getElementById("editDescription").value;
        const link = document.getElementById("editLink").value;
        const publicationDate = document.getElementById("editPublicationDate").value;

        // Validaciones b√°sicas
        if (!title.trim() || !description.trim()) {
          showNotification("T√≠tulo y descripci√≥n son obligatorios", "error");
          return;
        }

        const newsData = {
          id: id,
          title: title.trim(),
          description: description.trim(),
          link: link.trim(),
          publicationDate: publicationDate || null,
        };

        const success = await saveNews(newsData);

        if (success) {
          window.hideModal("editModal");
          document.getElementById("editForm").reset();
          document.getElementById("editId").value = "";
          
          // Recargar la p√°gina para mostrar los cambios
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        }
      });

      // Escuchar eventos de actualizaci√≥n
      document.addEventListener("newsSaved", (event) => {
        const { news: savedNews, isEdit } = event.detail;
        console.log("üîÑ [NewsList] Noticia guardada:", savedNews);
        
        // Limpiar cach√© de imagen para forzar recarga
        imageCache.delete(savedNews.id);
        
        // Recargar im√°genes despu√©s de un breve delay
        setTimeout(() => {
          window.loadNewsImages();
        }, 500);
      });

      // Cerrar modal al hacer clic fuera
      document.getElementById("editModal")?.addEventListener("click", (e) => {
        if (e.target.id === "editModal") {
          window.hideModal("editModal");
        }
      });

      // Cerrar con Escape
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          window.hideModal("editModal");
        }
      });
      
      // Observador para detectar nuevos elementos
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Recargar im√°genes cuando se a√±aden nuevos nodos
            setTimeout(() => window.loadNewsImages(), 100);
          }
        });
      });
      
      const newsListElement = document.getElementById('news-list');
      if (newsListElement) {
        observer.observe(newsListElement, { childList: true, subtree: true });
      }
    });
  </script>
</div>