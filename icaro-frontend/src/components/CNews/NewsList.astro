---
import NewsCard from "@/components/CNews/CCNewsList/NewsCard.astro";
import NewsAdd from "@/components/CNews/NewsAdd.astro";

interface News {
  id: string;
  title: string;
  description: string;
  participants: string[];
  FirstprojectDate: string;
  SecondprojectDate: string;
  tags: string[];
  workIds?: string[];
  image?: string;
  link?: string;
}

interface Props {
  news: News[];
  isAdmin?: boolean;
}

const { news, isAdmin = false } = Astro.props;
---

<div id="news-list-container">
  <NewsAdd isAdmin={isAdmin} />

  <div class="mb-6">
    <div class="relative max-w-md mx-auto">
      <input type="text" id="search-input" placeholder="Buscar noticias..." class="w-full px-4 py-2 pl-10 pr-4 text-gray-700 bg-white border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent transition-all" />
      <div class="absolute inset-y-0 left-0 flex items-center pl-3">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>
  </div>

  <div class="space-y-6" id="news-list">
    {news.map((newsItem, index) => {
      const validatedNews = {
        ...newsItem,
        id: newsItem.id || `news-${index}`,
        title: newsItem.title || 'Sin título',
        description: newsItem.description || 'Sin descripción',
        participants: Array.isArray(newsItem.participants) ? newsItem.participants : [],
        tags: Array.isArray(newsItem.tags) ? newsItem.tags : [],
        workIds: Array.isArray(newsItem.workIds) ? newsItem.workIds : [],
      };
      return <NewsCard news={validatedNews} isAdmin={isAdmin} />;
    })}
  </div>

  <!-- Modal global de edición -->
  <div id="editModal" class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4">
    <div class="modal-overlay absolute inset-0 bg-black/50" onclick="window.hideModal('editModal')"></div>

    <div class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto p-6">
      <h3 id="modalTitle" class="text-xl font-bold mb-4">Editar Noticia</h3>

      <form id="editForm" class="space-y-4">
        <input type="hidden" id="editId" />

        <div>
          <label class="block mb-1 text-sm font-medium">Título</label>
          <input type="text" id="editTitle" required class="w-full px-3 py-2 border rounded-md"/>
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Descripción</label>
          <textarea id="editDescription" required class="w-full px-3 py-2 border rounded-md h-32"></textarea>
        </div>

        <div class="flex gap-4 pt-4">
          <button type="button" onclick="window.hideModal('editModal')" class="px-4 py-2 border rounded-md hover:bg-gray-50">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229]">Guardar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<style is:global>
.modal { 
  opacity: 0; 
  pointer-events: none; 
  transition: opacity 0.3s ease; 
}
.modal:not(.hidden) { 
  opacity: 1; 
  pointer-events: auto; 
}
.modal-content {
  transform: translateY(-20px);
  transition: transform 0.3s ease;
}
.modal:not(.hidden) .modal-content {
  transform: translateY(0);
}
</style>

<script is:inline define:vars={{ isAdmin }}>
// Funciones globales que deben estar disponibles para todos los NewsCard
window.editNews = function(event) {
  event.preventDefault();
  event.stopPropagation();
  
  const button = event.currentTarget;
  const newsItem = {
    id: button.getAttribute('data-news-id'),
    title: button.getAttribute('data-news-title'),
    description: button.getAttribute('data-news-description')
  };
  
  console.log('🔔 [NewsList] editNews llamado para:', newsItem);
  document.dispatchEvent(new CustomEvent('editNews', { detail: newsItem }));
};

window.deleteNews = function(newsId) {
  if(confirm('¿Estás seguro de que quieres eliminar esta noticia?')) {
    console.log('Eliminar noticia', newsId);
    // Aquí iría tu fetch DELETE
  }
};

window.showModal = function(modalId) {
  const modal = document.getElementById(modalId);
  if(modal){
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }
};

window.hideModal = function(modalId) {
  const modal = document.getElementById(modalId);
  if(modal){
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
  }
};

document.addEventListener('DOMContentLoaded', () => {
  console.log('🔔 [NewsList] Componente cargado. isAdmin inicial:', isAdmin);

  // Escuchar cambios en el estado admin desde TopUtility
  window.addEventListener('adminStatusChanged', (event) => {
    const { isAdmin: newAdminStatus, source } = event.detail;
    console.log('🔔 [NewsList] adminStatusChanged escuchado. Nuevo estado:', newAdminStatus, 'Fuente:', source);
    
    // Actualizar todos los botones admin
    const adminButtons = document.querySelectorAll('[id^="admin-buttons-"]');
    console.log('🔔 [NewsList] Encontrados', adminButtons.length, 'conjuntos de botones admin');
    adminButtons.forEach(button => {
      button.classList.toggle('hidden', !newAdminStatus);
    });
  });

  // Escuchar el evento de edición desde las tarjetas
  document.addEventListener('editNews', (event) => {
    const newsItem = event.detail;
    console.log('🔔 [NewsList] Evento editNews recibido:', newsItem);
    
    document.getElementById('editId').value = newsItem.id;
    document.getElementById('editTitle').value = newsItem.title;
    document.getElementById('editDescription').value = newsItem.description;
    document.getElementById('modalTitle').textContent = `Editar "${newsItem.title}"`;
    window.showModal('editModal');
  });

  // Manejar el envío del formulario de edición
  document.getElementById('editForm')?.addEventListener('submit', (e) => {
    e.preventDefault();
    const id = document.getElementById('editId').value;
    const title = document.getElementById('editTitle').value;
    const description = document.getElementById('editDescription').value;
    
    // Aquí iría la lógica para guardar los cambios
    console.log('Guardar cambios:', { id, title, description });
    window.hideModal('editModal');
  });

  // Cerrar modal al hacer clic fuera
  document.getElementById('editModal')?.addEventListener('click', (e) => {
    if (e.target.id === 'editModal') {
      window.hideModal('editModal');
    }
  });
});
</script>