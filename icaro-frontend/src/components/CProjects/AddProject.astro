---
interface Props {
  isAdmin: boolean;
}

const { isAdmin } = Astro.props;
---

<div id="add-project-container" class="mb-6 flex justify-center">
  <button
    id="addProjectButton"
    class:list={[
      isAdmin ? "block" : "hidden",
      "bg-[#006D38] hover:bg-[#005229] text-white font-bold py-2 px-4 rounded flex items-center edit-btn transition-colors",
    ]}
    onclick="showAddProjectModal()"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 mr-2"
      viewBox="0 0 20 20"
      fill="currentColor"
    >
      <path
        fill-rule="evenodd"
        d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
        clip-rule="evenodd"></path>
    </svg>
    Crear Proyecto
  </button>

  <div
    id="add-project-modal"
    class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 fade-in"
  >
    <div
      class="modal-overlay absolute inset-0 bg-black/50"
      onclick="hideAddProjectModal()"
    >
    </div>

    <div
      class="relative bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto"
    >
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-bold">Crear Nuevo Proyecto</h3>
          <button
            type="button"
            onclick="hideAddProjectModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="add-project-form" class="space-y-4">
          <div>
            <label class="block mb-1 text-sm font-medium"
              >ID del Proyecto *</label
            >
            <input
              type="text"
              id="id"
              name="id"
              required
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              placeholder="PRJ-001"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium"
              >Título del Proyecto *</label
            >
            <input
              type="text"
              id="title"
              name="title"
              required
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Descripción *</label>
            <textarea
              id="description"
              name="description"
              rows="3"
              required
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
            ></textarea>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Participantes *</label
            >
            <textarea
              id="participants"
              name="participants"
              required
              rows="2"
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              placeholder="Participante1, Participante2, Participante3"
            ></textarea>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block mb-1 text-sm font-medium"
                >Fecha de Inicio *</label
              >
              <input
                type="date"
                id="FirstprojectDate"
                name="FirstprojectDate"
                required
                class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              />
            </div>

            <div>
              <label class="block mb-1 text-sm font-medium"
                >Fecha de Finalización</label
              >
              <input
                type="date"
                id="SecondprojectDate"
                name="SecondprojectDate"
                class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
              />
            </div>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Etiquetas</label>
            <div
              class="flex flex-wrap py-2 px-3 border rounded-md"
              id="tagsContainer"
            >
            </div>
            <div class="flex mt-2">
              <input
                type="text"
                id="tagInput"
                class="flex-grow px-3 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
                placeholder="Nueva etiqueta"
              />
              <button
                type="button"
                onclick="addTag()"
                class="px-3 bg-[#006D38] text-white rounded-r-md hover:bg-[#005229] transition-colors"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Presione Enter o el botón '+' para añadir etiquetas
            </p>
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium"
              >IDs de Trabajos Relacionados</label
            >
            <div
              class="flex flex-wrap py-2 px-3 border rounded-md"
              id="workIdsContainer"
            >
            </div>
            <div class="flex mt-2">
              <input
                type="text"
                id="workIdInput"
                class="flex-grow px-3 py-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
                placeholder="ID del trabajo"
              />
              <button
                type="button"
                onclick="addWorkId()"
                class="px-3 bg-[#006D38] text-white rounded-r-md hover:bg-[#005229] transition-colors"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            </div>
            <p class="text-xs text-gray-500 mt-1">
              Presione Enter o el botón '+' para añadir IDs de trabajos
            </p>
          </div>

          <div class="flex gap-4 pt-4 border-t">
            <button
              type="button"
              onclick="hideAddProjectModal()"
              class="px-4 py-2 border rounded-md hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229] transition-colors"
            >
              Crear Proyecto
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  let tagsList = [];
  let workIdsList = [];

  // ============= SISTEMA DE AUTENTICACIÓN JWT =============

  // Helper para generar headers con token JWT
  function getAuthHeaders() {
    const token = localStorage.getItem("adminToken");

    const headers = {
      "Content-Type": "application/json",
    };

    // Si existe token, añadir header Authorization con Bearer
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    }

    return headers;
  }

  // Función para manejar errores de autenticación
  function handleAuthError(response) {
    if (response.status === 401 || response.status === 403) {
      alert(
        "No tiene permisos para realizar esta acción. Por favor, inicie sesión como administrador.",
      );
      localStorage.removeItem("adminToken");
      // Opcional: redirigir al login
      // window.location.href = '/admin-login';
      return true;
    }
    return false;
  }

  // Verificar si el usuario tiene permisos de admin
  async function verifyAdminPermissions() {
    try {
      const token = localStorage.getItem("adminToken");
      if (!token) {
        return false;
      }

      const response = await fetch("http://localhost:8080/api/auth/verify", {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (response.ok) {
        const data = await response.json();
        return data.authenticated && data.isAdmin;
      } else {
        localStorage.removeItem("adminToken");
        return false;
      }
    } catch (error) {
      console.error("❌ [ADD-PROJECT] Error verificando permisos:", error);
      return false;
    }
  }

  async function showAddProjectModal() {
    console.log("➕ [ADD-PROJECT] Intentando mostrar modal de añadir proyecto");

    // Verificar permisos antes de mostrar el modal
    const hasPermissions = await verifyAdminPermissions();
    if (!hasPermissions) {
      alert(
        "Debe iniciar sesión como administrador para realizar esta acción.",
      );
      return;
    }

    console.log("✅ [ADD-PROJECT] Permisos verificados, abriendo modal");
    document.getElementById("add-project-modal").classList.remove("hidden");
    document.body.style.overflow = "hidden";
  }

  function hideAddProjectModal() {
    document.getElementById("add-project-modal").classList.add("hidden");
    document.body.style.overflow = "";
  }

  function addTag() {
    const tagInput = document.getElementById("tagInput");
    const tag = tagInput.value.trim();

    if (tag && !tagsList.includes(tag)) {
      tagsList.push(tag);
      renderTags();
      tagInput.value = "";
    }
  }

  function removeTag(tag) {
    tagsList = tagsList.filter((t) => t !== tag);
    renderTags();
  }

  function renderTags() {
    const container = document.getElementById("tagsContainer");
    container.innerHTML = "";

    tagsList.forEach((tag) => {
      const tagElement = document.createElement("div");
      tagElement.className =
        "inline-flex items-center bg-gray-100 rounded-full px-3 py-1 text-sm mr-2 mb-2";
      tagElement.innerHTML = `
      ${tag}
      <button type="button" onclick="removeTag('${tag}')" class="ml-1 text-gray-500 hover:text-gray-700">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
      container.appendChild(tagElement);
    });
  }

  function addWorkId() {
    const workIdInput = document.getElementById("workIdInput");
    const workId = workIdInput.value.trim();

    if (workId && !workIdsList.includes(workId)) {
      workIdsList.push(workId);
      renderWorkIds();
      workIdInput.value = "";
    }
  }

  function removeWorkId(workId) {
    workIdsList = workIdsList.filter((w) => w !== workId);
    renderWorkIds();
  }

  function renderWorkIds() {
    const container = document.getElementById("workIdsContainer");
    container.innerHTML = "";

    workIdsList.forEach((workId) => {
      const workIdElement = document.createElement("div");
      workIdElement.className =
        "inline-flex items-center bg-blue-100 rounded-full px-3 py-1 text-sm mr-2 mb-2";
      workIdElement.innerHTML = `
      ${workId}
      <button type="button" onclick="removeWorkId('${workId}')" class="ml-1 text-gray-500 hover:text-gray-700">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
      container.appendChild(workIdElement);
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("add-project-form");
    const tagInput = document.getElementById("tagInput");
    const workIdInput = document.getElementById("workIdInput");

    tagInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        e.preventDefault();
        addTag();
      }
    });

    workIdInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        e.preventDefault();
        addWorkId();
      }
    });

    if (form) {
      form.addEventListener("submit", async function (e) {
        e.preventDefault();

        console.log("➕ [ADD-PROJECT] Intentando crear proyecto");

        // Verificar permisos antes de procesar
        const hasPermissions = await verifyAdminPermissions();
        if (!hasPermissions) {
          alert(
            "Debe iniciar sesión como administrador para realizar esta acción.",
          );
          return;
        }

        const id = document.getElementById("id").value.trim();
        const title = document.getElementById("title").value.trim();
        const description = document.getElementById("description").value.trim();
        const participantsInput = document
          .getElementById("participants")
          .value.trim();
        const FirstprojectDate =
          document.getElementById("FirstprojectDate").value;

        if (
          !id ||
          !title ||
          !description ||
          !participantsInput ||
          !FirstprojectDate
        ) {
          alert("Por favor, complete todos los campos obligatorios");
          return;
        }

        const participantsArray = participantsInput
          .split(",")
          .map((participant) => participant.trim())
          .filter((participant) => participant !== "");

        const projectData = {
          id: id,
          title: title,
          description: description,
          participants: participantsArray,
          tags: tagsList,
          FirstprojectDate: FirstprojectDate,
          SecondprojectDate:
            document.getElementById("SecondprojectDate").value || null,
          workIds: workIdsList,
        };

        try {
          console.log(
            "📤 [ADD-PROJECT] Enviando datos del proyecto:",
            projectData,
          );
          console.log(
            "🔐 [ADD-PROJECT] Headers que se van a enviar:",
            getAuthHeaders(),
          );

          const response = await fetch(
            "http://localhost:8080/api/project/save",
            {
              method: "POST",
              headers: getAuthHeaders(), // Usar headers con JWT en lugar de credentials
              body: JSON.stringify(projectData),
            },
          );
          if (response.ok) {
            form.reset();
            tagsList = [];
            workIdsList = [];
            renderTags();
            renderWorkIds();
            hideAddProjectModal();
            addNotification(
              "success",
              `Proyecto "${title}" creado exitosamente.`,
            );
            window.location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            let errorMessage = "Error desconocido";

            // Manejo específico de errores comunes
            if (response.status === 409) {
              errorMessage =
                "Ya existe un proyecto con ese ID. Por favor, use un ID diferente.";
            } else if (response.status === 400) {
              errorMessage =
                "Datos inválidos. Verifique que todos los campos estén correctos.";
            } else if (response.status === 500) {
              errorMessage =
                "Error interno del servidor. Intente nuevamente más tarde.";
            } else {
              try {
                const responseText = await response.text();
                if (
                  responseText.startsWith("{") ||
                  responseText.startsWith("[")
                ) {
                  try {
                    const errorData = JSON.parse(responseText);
                    errorMessage =
                      errorData.message || errorData.error || responseText;
                  } catch {
                    errorMessage = responseText;
                  }
                } else {
                  errorMessage =
                    responseText ||
                    `Error ${response.status}: ${response.statusText}`;
                }
              } catch (error) {
                errorMessage = `Error ${response.status}: ${response.statusText}`;
              }
            }

            console.error("❌ [ADD-PROJECT] Error del backend:", errorMessage);
            alert("Error al crear el proyecto: " + errorMessage);
          }
        } catch (error) {
          console.error("❌ [ADD-PROJECT] Error de conexión:", error);
          alert(
            "Error de conexión al intentar crear el proyecto: " + error.message,
          );
        }
      });
    }

    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        hideAddProjectModal();
      }
    });
  });

  // Notificaciones:

  function addNotification(type, message) {
    console.log("🔍 addNotification llamado:", { type, message });
    try {
      const notifications = JSON.parse(
        localStorage.getItem("pendingNotifications") || "[]",
      );

      const notification = {
        id: `stored-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
        message,
        type,
        duration: 4000,
        timestamp: Date.now(),
      };

      notifications.push(notification);
      localStorage.setItem(
        "pendingNotifications",
        JSON.stringify(notifications),
      );

      console.log(
        "💾 Notificación guardada en localStorage para mostrar después de recargar:",
        notification,
      );

      return notification.id;
    } catch (error) {
      console.error("❌ Error guardando notificación:", error);
    }
  }
</script>
