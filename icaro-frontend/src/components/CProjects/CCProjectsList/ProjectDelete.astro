---
export interface Props {
  project: {
    id: string;
    title: string;
    [key: string]: any;
  };
  cardId: string;
  isAdmin?: boolean;
}

const { project, cardId, isAdmin = false } = Astro.props;
const uniqueId = `${cardId}-${project.id}`;
---

{project && project.id && project.title ? (
  <button
    class={`delete-btn ${isAdmin ? 'block' : 'hidden'} absolute top-14 right-3 z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm`}
    data-project-id={project.id}
    data-project-title={project.title}
    data-card-id={cardId}
    data-unique-id={uniqueId}
    aria-label="Eliminar proyecto"
    type="button"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 text-gray-600"
      viewBox="0 0 20 20"
      fill="currentColor"
    >
      <path
        fill-rule="evenodd"
        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
        clip-rule="evenodd"
      />
    </svg>
  </button>
) : (
  <p class="text-sm text-gray-500">No se puede eliminar este proyecto.</p>
)}

<!-- Modal de confirmación inicial - ID único -->
<div
  id={`deleteProjectModal-${uniqueId}`}
  class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
>
  <div class="modal-content relative bg-white rounded-lg shadow-xl w-full max-w-md" onclick="event.stopPropagation()">
    <div class="p-6">
      <div class="flex items-center justify-center w-12 h-12 mx-auto mb-4 bg-red-100 rounded-full">
        <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.134 16.5c-.77.833.192 2.5 1.732 2.5z"
          ></path>
        </svg>
      </div>

      <h3 class="text-xl font-bold mb-4 text-gray-900 text-center">
        Confirmar Eliminación
      </h3>

      <div class="mb-6 text-gray-700 text-center">
        <p class="mb-3">
          ¿Está seguro de que desea eliminar el proyecto <strong id={`deleteProjectTitle-${uniqueId}`} class="text-gray-900"></strong>?
        </p>
        <div class="bg-red-50 border border-red-200 rounded-lg p-3 mb-3">
          <p class="text-sm text-red-800 font-medium">
            ⚠️ Esta acción eliminará permanentemente:
          </p>
          <ul class="text-sm text-red-700 mt-1 list-disc list-inside">
            <li>Este proyecto</li>
            <li>Sus publicaciones relacionadas</li>
            <li>Sus datos asociados</li>
          </ul>
        </div>
        <span class="text-sm text-red-600 font-medium">Esta acción no se puede deshacer.</span>
      </div>

      <div class="flex gap-3 pt-4">
        <button
          type="button"
          id={`cancelProjectDeleteBtn-${uniqueId}`}
          class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors flex-1 font-medium text-gray-700"
        >
          Cancelar
        </button>
        <button
          type="button"
          id={`confirmProjectDeleteBtn-${uniqueId}`}
          class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex-1 font-medium"
        >
          Sí, Eliminar
        </button>
      </div>
    </div>
  </div>
</div>



<script is:inline define:vars={{ project, cardId, uniqueId }}>
  document.addEventListener('DOMContentLoaded', function() {
    
    function getAuthHeaders() {
      const token = localStorage.getItem('adminToken');
      const headers = {
        'Content-Type': 'application/json'
      };
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      return headers;
    }

    function handleAuthError(response) {
      if (response.status === 401 || response.status === 403) {
        addNotification('error', 'No tiene permisos para realizar esta acción. Por favor, inicie sesión como administrador.');
        localStorage.removeItem('adminToken');
        return true;
      }
      return false;
    }

    async function verifyAdminPermissions() {
      try {
        const token = localStorage.getItem('adminToken');
        if (!token) return false;

        const response = await fetch('http://localhost:8080/api/auth/verify', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
          const data = await response.json();
          return data.authenticated && data.isAdmin;
        } else {
          localStorage.removeItem('adminToken');
          return false;
        }
      } catch (error) {
        return false;
      }
    }

    function showProjectModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove("hidden");
        document.body.style.overflow = "hidden";
      }
    }

    function hideProjectDeleteModal(instanceId) {
      const modal = document.getElementById(`deleteProjectModal-${instanceId}`);
      if (modal) {
        modal.classList.add("hidden");
        document.body.style.overflow = "";
      }
    }

    // Crear funciones globales específicas para esta instancia
    window[`hideProjectDeleteModal`] = () => hideProjectDeleteModal(uniqueId);

    // Buscar SOLO el botón de esta instancia específica
    const deleteBtn = document.querySelector(`[data-unique-id="${uniqueId}"]`);
    if (!deleteBtn) {
      console.warn(`No se encontró el botón de eliminación para ${uniqueId}`);
      return;
    }

    async function handleDelete() {        
      const hasPermissions = await verifyAdminPermissions();
      if (!hasPermissions) {
        addNotification('error', 'Debe iniciar sesión como administrador para realizar esta acción.');
        return;
      }

      const projectId = project?.id || deleteBtn.getAttribute('data-project-id');
      const projectTitle = project?.title || deleteBtn.getAttribute('data-project-title');
      
      if (!projectId) {
        addNotification('error', 'Error: No se puede eliminar, falta información del proyecto.');
        return;
      }

      document.getElementById(`deleteProjectTitle-${uniqueId}`).textContent = projectTitle || "este proyecto";
      showProjectModal(`deleteProjectModal-${uniqueId}`);
    }

    // Event listener SOLO para este botón específico
    deleteBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      handleDelete();
    });

    // Botón de cancelar - SOLO para esta instancia
    const cancelBtn = document.getElementById(`cancelProjectDeleteBtn-${uniqueId}`);
    if (cancelBtn) {
      cancelBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        hideProjectDeleteModal(uniqueId);
      });
    }

    // Botón de confirmación - SOLO para esta instancia (ahora elimina directamente)
    const confirmBtn = document.getElementById(`confirmProjectDeleteBtn-${uniqueId}`);
    if (confirmBtn) {
      confirmBtn.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        confirmBtn.disabled = true;
        confirmBtn.textContent = "Eliminando...";

        const projectId = project?.id || deleteBtn.getAttribute('data-project-id');

        try {
          const response = await fetch(`http://localhost:8080/api/project/delete/${projectId}`, {
            method: 'DELETE',
            headers: getAuthHeaders()
          });

          if (response.ok) {
            addNotification("success", "Proyecto eliminado correctamente.");
            hideProjectDeleteModal(uniqueId);
            window.location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            let errorMessage = 'Error desconocido';
            if (response.status === 404) {
              errorMessage = 'El proyecto no existe o ya ha sido eliminado.';
            } else if (response.status === 409) {
              errorMessage = 'No se puede eliminar el proyecto porque tiene dependencias asociadas.';
            } else if (response.status === 500) {
              errorMessage = 'Error interno del servidor. Intente nuevamente más tarde.';
            } else {
              try {
                const responseText = await response.text();
                if (responseText.startsWith('{') || responseText.startsWith('[')) {
                  try {
                    const errorData = JSON.parse(responseText);
                    errorMessage = errorData.message || errorData.error || responseText;
                  } catch {
                    errorMessage = responseText;
                  }
                } else {
                  errorMessage = responseText || `Error ${response.status}: ${response.statusText}`;
                }
              } catch (error) {
                errorMessage = `Error ${response.status}: ${response.statusText}`;
              }
            }
            addNotification("error", `No se pudo eliminar el proyecto: ${errorMessage}`);
            hideProjectDeleteModal(uniqueId);
          }
        } catch (error) {
          addNotification("error", 'Error de conexión al eliminar el proyecto: ' + error.message);
        } finally {
          confirmBtn.disabled = false;
          confirmBtn.textContent = "Sí, Eliminar";
        }
      });
    }

    // Event listener para cerrar modal al hacer click fuera
    const deleteModal = document.getElementById(`deleteProjectModal-${uniqueId}`);
    if (deleteModal) {
      deleteModal.addEventListener('click', (e) => {
        if (e.target === deleteModal) {
          hideProjectDeleteModal(uniqueId);
        }
      });
    }

    // Event listener para ESC - específico para esta instancia
    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        const deleteModal = document.getElementById(`deleteProjectModal-${uniqueId}`);
        
        if (deleteModal && !deleteModal.classList.contains("hidden")) {
          hideProjectDeleteModal(uniqueId);
        }
      }
    });
  });

  function addNotification(type, message) {
    try {
      const notifications = JSON.parse(localStorage.getItem("pendingNotifications") || "[]");
      const notification = {
        id: `stored-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
        message,
        type,
        duration: 4000,
        timestamp: Date.now(),
      };
      notifications.push(notification);
      localStorage.setItem("pendingNotifications", JSON.stringify(notifications));
      return notification.id;
    } catch (error) {
      console.error("Error guardando notificación:", error);
    }
  }
</script>

<style is:global>
  .modal {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }

  .modal:not(.hidden) {
    opacity: 1;
    pointer-events: auto;
  }

  .modal-content {
    transform: scale(0.95);
    transition: transform 0.3s ease-in-out;
  }

  .modal:not(.hidden) .modal-content {
    transform: scale(1);
  }
</style>