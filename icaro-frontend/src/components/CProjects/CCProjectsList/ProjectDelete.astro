---
export interface Props {
  project: {
    id: string;
    title: string;
    [key: string]: any;
  };
  cardId: string;
  isAdmin?: boolean;
}

const { project, cardId, isAdmin = false } = Astro.props;
---

{project && project.id && project.title ? (
  <button
    class={`delete-btn ${isAdmin ? 'block' : 'hidden'} absolute top-14 right-3 z-10 p-2 rounded-full bg-white/90 hover:bg-red-100 transition-colors shadow-sm`}
    data-project-id={project.id}
    data-project-title={project.title}
    data-card-id={cardId}
    aria-label="Eliminar proyecto"
    type="button"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 text-gray-600"
      viewBox="0 0 20 20"
      fill="currentColor"
    >
      <path
        fill-rule="evenodd"
        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
        clip-rule="evenodd"
      />
    </svg>
  </button>

  <script is:inline define:vars={{ project, cardId }}>
    document.addEventListener('DOMContentLoaded', function() {
      
      // ============= SISTEMA DE AUTENTICACI√ìN JWT =============

      // Helper para generar headers con token JWT
      function getAuthHeaders() {
        const token = localStorage.getItem('adminToken');
        
        const headers = {
          'Content-Type': 'application/json'
        };
        
        // Si existe token, a√±adir header Authorization con Bearer
        if (token) {
          headers['Authorization'] = `Bearer ${token}`;
        }
        
        return headers;
      }

      // Funci√≥n para manejar errores de autenticaci√≥n
      function handleAuthError(response) {
        if (response.status === 401 || response.status === 403) {
          alert('No tiene permisos para realizar esta acci√≥n. Por favor, inicie sesi√≥n como administrador.');
          localStorage.removeItem('adminToken');
          // Opcional: redirigir al login
          // window.location.href = '/admin-login';
          return true;
        }
        return false;
      }

      // Verificar si el usuario tiene permisos de admin
      async function verifyAdminPermissions() {
        try {
          const token = localStorage.getItem('adminToken');
          if (!token) {
            return false;
          }

          const response = await fetch('http://localhost:8080/api/auth/verify', {
            headers: { 'Authorization': `Bearer ${token}` }
          });

          if (response.ok) {
            const data = await response.json();
            return data.authenticated && data.isAdmin;
          } else {
            localStorage.removeItem('adminToken');
            return false;
          }
        } catch (error) {
          console.error('‚ùå [DELETE-PROJECT] Error verificando permisos:', error);
          return false;
        }
      }

      // ============= L√ìGICA DE ELIMINACI√ìN =============

      const cardElement = document.querySelector(`[data-project-id="${project.id}"]`);
      if (!cardElement) return;
      
      const deleteBtn = cardElement.querySelector('.delete-btn');
      if (!deleteBtn) return;

      async function handleDelete() {
        console.log('üóëÔ∏è [DELETE-PROJECT] Intentando eliminar proyecto:', project.id);
        
        // Verificar permisos antes de proceder
        const hasPermissions = await verifyAdminPermissions();
        if (!hasPermissions) {
          alert('Debe iniciar sesi√≥n como administrador para realizar esta acci√≥n.');
          return;
        }

        console.log('‚úÖ [DELETE-PROJECT] Permisos verificados');

        const projectId = project?.id || deleteBtn.getAttribute('data-project-id');
        const projectTitle = project?.title || deleteBtn.getAttribute('data-project-title');
        
        if (!projectId) {
          alert('Error: No se puede eliminar, falta informaci√≥n del proyecto.');
          return;
        }

        const confirmed = confirm(`¬øEst√°s seguro de que deseas eliminar el proyecto "${projectTitle}"?\n\nEsta acci√≥n no se puede deshacer y eliminar√° tambi√©n todas las publicaciones relacionadas.`);
        if (!confirmed) return;

        // Doble confirmaci√≥n para mayor seguridad
        const doubleConfirmed = confirm(`¬°ATENCI√ìN!\n\nEst√°s a punto de eliminar permanentemente:\n- El proyecto: "${projectTitle}"\n- Todas sus publicaciones relacionadas\n- Todos los datos asociados\n\n¬øEst√°s completamente seguro?`);
        if (!doubleConfirmed) return;

        try {
          console.log('üì§ [DELETE-PROJECT] Enviando solicitud de eliminaci√≥n');
          console.log('üîê [DELETE-PROJECT] Headers que se van a enviar:', getAuthHeaders());

          const response = await fetch(`http://localhost:8080/api/project/delete/${projectId}`, {
            method: 'DELETE',
            headers: getAuthHeaders() // Usar headers con JWT en lugar de credentials
          });

          console.log('üîê [DELETE-PROJECT] Respuesta del servidor:', response.status);

          if (response.ok) {
            alert('Proyecto eliminado correctamente.');
            console.log('‚úÖ [DELETE-PROJECT] Proyecto eliminado exitosamente');
            window.location.reload();
          } else if (handleAuthError(response)) {
            return;
          } else {
            let errorMessage = 'Error desconocido';
            
            // Manejo espec√≠fico de errores comunes
            if (response.status === 404) {
              errorMessage = 'El proyecto no existe o ya ha sido eliminado.';
            } else if (response.status === 409) {
              errorMessage = 'No se puede eliminar el proyecto porque tiene dependencias asociadas.';
            } else if (response.status === 500) {
              errorMessage = 'Error interno del servidor. Intente nuevamente m√°s tarde.';
            } else {
              try {
                // Intentar leer como texto primero (m√°s compatible)
                const responseText = await response.text();
                
                // Si el texto parece ser JSON, intentar parsearlo
                if (responseText.startsWith('{') || responseText.startsWith('[')) {
                  try {
                    const errorData = JSON.parse(responseText);
                    errorMessage = errorData.message || errorData.error || responseText;
                  } catch {
                    errorMessage = responseText;
                  }
                } else {
                  errorMessage = responseText || `Error ${response.status}: ${response.statusText}`;
                }
              } catch (error) {
                errorMessage = `Error ${response.status}: ${response.statusText}`;
              }
            }
            
            console.error('‚ùå [DELETE-PROJECT] Error del backend:', errorMessage);
            alert('Error al eliminar el proyecto: ' + errorMessage);
          }
        } catch (error) {
          console.error('‚ùå [DELETE-PROJECT] Error de conexi√≥n:', error);
          alert('Error de conexi√≥n al eliminar el proyecto: ' + error.message);
        }
      }

      deleteBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        handleDelete();
      });
    });
  </script>
) : (
  <p class="text-sm text-gray-500">No se puede eliminar este proyecto.</p>
)}