---
export interface Props {
  project: {
    id: string;
    title: string;
    description: string;
    colaborators: string[];
    firstprojectDate: string; 
    secondprojectDate: string;
    [key: string]: any;
  };
  isAdmin?: boolean;
}

const { project, isAdmin = false } = Astro.props;
const cardId = `project-card-${project.id}`;
const modalId = `edit-project-modal-${project.id}`;
const editBtnId = `edit-btn-${project.id}`;
---

<!-- Botón de editar -->
<button
  id={editBtnId}
  class={`edit-btn ${isAdmin ? 'flex' : 'hidden'} absolute top-3 right-3 z-10 p-2 rounded-full bg-white/90 hover:bg-gray-100 transition-colors shadow-sm`}
  data-project-id={project.id}
  data-card-id={cardId}
  aria-label="Editar proyecto"
  type="button"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-5 w-5 text-gray-600"
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
  </svg>
</button>

<!-- Modal de edición -->
<div
  id={modalId}
  class="modal hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50"
>
  <div class="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
    <div class="p-6">   
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold">Editar Proyecto</h3>
        <button
          type="button"
          class="close-modal text-gray-500 hover:text-gray-700"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form class="project-edit-form space-y-4">
        <input type="hidden" name="projectId" value={project.id} />

        <div>
          <label class="block mb-1 text-sm font-medium">Título del Proyecto *</label>
          <input 
            type="text" 
            name="title" 
            value={project.title} 
            required 
            class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" 
          />
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Descripción *</label>
          <textarea 
            name="description" 
            rows="3" 
            required
            class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
          >{project.description || ""}</textarea>
        </div>

        <div>
          <label class="block mb-1 text-sm font-medium">Colaboradores</label>
          <textarea 
            name="colaborators" 
            rows="2" 
            class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent"
            placeholder="Colaborador1, Colaborador2, Colaborador3"
          >{project.colaborators?.join(", ") || ""}</textarea>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block mb-1 text-sm font-medium">Primera Fecha del Proyecto</label>
            <input 
              type="date" 
              name="firstprojectDate" 
              value={project.firstprojectDate || ""} 
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" 
            />
          </div>

          <div>
            <label class="block mb-1 text-sm font-medium">Segunda Fecha del Proyecto</label>
            <input 
              type="date" 
              name="secondprojectDate" 
              value={project.secondprojectDate || ""} 
              class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#006D38] focus:border-transparent" 
            />
          </div>
        </div>

        <div class="flex gap-4 pt-4 border-t">
          <button
            type="button"
            class="cancel-btn px-4 py-2 border rounded-md hover:bg-gray-50 transition-colors"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-[#006D38] text-white rounded-md hover:bg-[#005229] transition-colors"
          >
            Guardar Cambios
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script is:inline define:vars={{ modalId, editBtnId, project, isAdmin }}>
  function initializeProjectEditComponent() {
    // Buscar el botón directamente por su ID único
    const editBtn = document.getElementById(editBtnId);
    const modal = document.getElementById(modalId);
    
    if (!editBtn || !modal) {
      console.warn('No se encontraron elementos necesarios:', { editBtn: !!editBtn, modal: !!modal });
      return;
    }

    const form = modal.querySelector('.project-edit-form');
    const closeBtn = modal.querySelector('.close-modal');
    const cancelBtn = modal.querySelector('.cancel-btn');

    if (!form) {
      console.warn('No se encontró el formulario');
      return;
    }

    // Función para abrir el modal
    function openModal() {
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      console.log('Modal abierto');
    }

    // Función para cerrar el modal
    function closeModal() {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
      console.log('Modal cerrado');
    }

    // Event listeners
    editBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log('Botón de editar clickeado');
      openModal();
    });

    if (closeBtn) {
      closeBtn.addEventListener('click', closeModal);
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', closeModal);
    }

    // Cerrar modal al hacer click fuera
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Cerrar con ESC
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });

    // Manejar envío del formulario
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!confirm("¿Estás seguro de que deseas guardar los cambios?")) {
        return;
      }
      
      const formData = new FormData(form);
      const projectData = {
        id: formData.get("projectId"),
        title: formData.get("title"),
        description: formData.get("description"),
        participants: formData.get("colaborators") ? 
          formData.get("colaborators").split(",").map(item => item.trim()).filter(Boolean) : [],
        firstprojectDate: formData.get("firstprojectDate") || null,
        secondprojectDate: formData.get("secondprojectDate") || null
      };

     
      try {
        const response = await fetch("http://localhost:8080/api/project/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: 'include',
          body: JSON.stringify(projectData)
        });

        if (response.ok) {
          alert("El proyecto se actualizó correctamente.");
          closeModal();
          window.location.reload();
        } else {
          let errorMessage = 'Error desconocido';
          try {
            const errorData = await response.json();
            errorMessage = errorData.message || JSON.stringify(errorData);
          } catch {
            try {
              errorMessage = await response.text();
            } catch {
              errorMessage = `Error ${response.status}: ${response.statusText}`;
            }
          }
          
          console.error('Error del backend:', errorMessage);
          alert("Error al actualizar el proyecto: " + errorMessage);
        }
      } catch (error) {
        console.error('Error de conexión:', error);
        alert("Error de conexión al actualizar el proyecto: " + error.message);
      }
    });

    console.log('ProjectEdit inicializado correctamente para:', project.id);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeProjectEditComponent);
  } else {
    setTimeout(initializeProjectEditComponent, 50);
  }
</script>

<style>
  .modal {
    transition: opacity 0.3s ease;
  }
  .modal.hidden {
    opacity: 0;
    pointer-events: none;
  }
  .modal:not(.hidden) {
    opacity: 1;
    pointer-events: all;
  }
</style>